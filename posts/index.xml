<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on My Hugo Blog</title><link>https://ny-a.github.io/hugo-blog/posts/</link><description>Recent content in Posts on My Hugo Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ny-a.github.io/hugo-blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Atcoder-toolsのDockerイメージを作りました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-tools-docker/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-tools-docker/</guid><description>atcoder-tools の docker イメージを作って、コンパイルなんかも自動でコンテナ内でするようにしました。 コンパイルオプションなんかもきっちり合わせて、軽微なエラーも同じ出力になるようにしたいです。</description></item><item><title>精進グラフ</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-score-graph/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-score-graph/</guid><description>精進グラフ というものがあることを知りました。 解いた問題の点数の合計 (割る100) とレーティングに何か関係があるのかと思って調べたのですが、 単に努力の絶対量の指針という感じでしょうか。
AtCoder はいろいろな非公式サービスがあって、愛されているように思いました。</description></item><item><title>RTTY のデコードを試す(5)</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-5/</link><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-5/</guid><description>前回はサンプリングレートや量子化ビット数を変更できるようにしましたが、 オリジナルのファイルから ffmpeg のデフォルト設定で wav に変換すると、 48kHz となり、実行時間が気になってきます。 そこで、高速化を試すことにしました。
真っ先に、リストに append したり pop したりするのは不安になってくるので、 array をリングバッファとして使いましょう。
その次はどこが遅いか調べます。cProfile なんかを使うとよさそうです。 調べてみると、一番遅いのは sum の呼び出しでしょうか。
window_size で平滑化(？)していますが、毎回その全てを足し合わせるのは効率が悪いですね。 実質的にしなければいけないのは、window_size 分だけ前の値を引いて、新しい値を足すことです。 別の class に切り出して、インデックスの管理もその中に任せましょう。
ファイルも分割したいですが、カレントディレクトリにある python ファイルを実行すると、 explicit relative import が使えないようなので、src ディレクトリ内にファイルを移動して、 python -m src.main のように呼び出すようにします。
** 演算子は、2乗とか決まっていたら乗算で書いた方が早いようですね。 値にあまり意味はなく (値に失礼)、大小を比較しているのみのため、sqrt も不要でしょう。 削除しましょう。
さて、ちまちまと高速化してきましたが、一番遅いのは多分 stdout です。ファイルに書くようにしましょう。 だいたい8倍くらいは高速になりました、多分。</description></item><item><title>都内でのワクチン接種</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/vaccine/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/vaccine/</guid><description>都内での18歳以上のワクチン接種が大規模接種センターで始まったようです。
とはいえ、23区内でもチケットの発送が完了しているのはまだ少ないということで、 すぐに、というわけではありませんが、届き次第できるだけ早く接種したいなと 思っています。</description></item><item><title>ARC122-A</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-arc122-a/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/atcoder-arc122-a/</guid><description>ARC122 の A 問題、結局時間内には解けなかったのですが、 じっくり考えてみるといい線は行ってたことが分かりました。
まず RE が出て心が折れていたのですが、普通に範囲外アクセスでした。 問題の上限を1桁打ち間違えていました。
あとはフィボナッチ数列まわりの数値が前後していたのがダメだったようです。 ただ、なぜかテストケースは全て通っていて、上記の上限を修正して出しても 3ケース以外は AC になっていたので、うまく気付くことができませんでした。
もう少し考察の精度を上げたいと思いました。</description></item><item><title>みずほ銀行の報告書</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/mizuho-bk-report/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/mizuho-bk-report/</guid><description>みずほ銀行のシステム障害の報告書が公表されたようですね。
失敗事例を知ることは、同じような失敗を繰り返さないためにも重要だと思っていますが、 みずほ銀行のシステムでは手作業の部分が多いという指摘を見かけました。
銀行の勘定系のような複雑なシステムを、全て1つのシステムに組み込むことは難しいと思いますが、 エラー発生時のことについてはある程度システム側での支援があった方がいいのかなと思いました。
もしかしたら、自分で勘定系システムっぽいものを組んでみたら大変さが分かってよいかもしれません(？？？) 対外接続システムなどは限界がありますが。。。</description></item><item><title>GitHubのrepository-dispatchイベント</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/github-repository-dispatch/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/github-repository-dispatch/</guid><description>repository-dispatch イベントは前から使っていたのですが、everest-preview をつけたまま使っていました。 もう不要になったのかと思い GitHub のドキュメント を見てみた所、やはり不要になっていました。
改めてドキュメントを見てみると、この API エンドポイントは GitHub の外からトリガーするために使うもののようですね。 GitHub Actions 内から他のリポジトリの Action をトリガーする方法が何かあるのでしょうか。</description></item><item><title>Hugo でブログを作ろうと思います</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/create-blog-with-hugo/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/create-blog-with-hugo/</guid><description>個人的にブログ形式はなんか違うなと思ってきていて、 Hugo などの静的サイトジェネレーターを使って Wiki のような形式で 情報をアウトプットしていきたいと考えているのですが、 ひとまず Hugo を試してみようと思いました。
Theme はとりあえず PaperMod を使ってみようと思います。 コンテンツは……とりあえずここと同じものを……。</description></item><item><title>駅データAPIのクローンを作りました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/ekidata/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/ekidata/</guid><description>作ったのは昨日なんですが、駅データ.jp さんの API のクローンを作成しました。
CSV ファイルと、PHP で生成プログラムを公開されていたので、 のんびり TypeScript に移植して GitHub Actions で生成、 GitHub Pages にデプロイしています。
今は HTML ファイルを一切置いていないですが、 API リファレンスなどを用意しようと思っています。</description></item><item><title>セキュリティ・キャンプ通過チェッカーを作りました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/seccamp-kaitou-id-checker/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/seccamp-kaitou-id-checker/</guid><description>昨晩 Twitter を眺めていると、セキュリティキャンプ通過者一覧の目 grep がつらいとの声を ちらほら見かけました。じゃあコンピューターに grep させればいいですよね。 明日は12時から予定があるので夜更しはできません。とりあえず寝ましょう。
09:00 起床 起きました。PC を開きました。 まず、create-react-app を叩きます。react も redux もあまり使ったことがないので 勉強がてら両方使いましょう。あとは適当に tsx を書いていきましょう。 適当にゴリゴリ実装していきます。公式 PDF をブラウザで開いて、テキストをコピー します。ほとんど半角数字と半角のカンマが使われていて優しいですね。どうせなら せめて txt、願わくば json で公開して欲しいものです。 ほとんどと書いたのは、ジュニア開発ゼミの箇所だけ全角のカンマが使われていました。 まあ3つだけなので手で修正して対応しました。
11:00 電車に乗る 40 分くらい電車で移動する必要があるのでこの時間に家を出ます。 まだ完成にはほど遠いです。はい、電車で開発しましょう。 昔は Bluetooth テザリングをしていた記憶があるのですが、電車の中には Bluetooth の 電波がかなり多く、ペアリングから始めるのは困難そうでした。USB テザリングして 開発を進めましょう。
11:40 目的地最寄り駅に到着 目的地に移動します。時間がもったいないので小走りで。
11:50 目的地到着 まだ時間があります。ラストスパートです。 GitHub Actions で CI/CD するつもりだったのですが、なんだかうまくいきません。 こだわっても仕方ないので、npm i gh-pages して手元からデプロイすることにします。
12:00 予定 ……デプロイすることにします。と思った瞬間、時間になったので名前を呼ばれます。 思ったよりも時間が早く過ぎていたようでした。どうしましょう……あと1分……
私「あと1分ください。」
1分もらいました。デプロイしてツイートします。完成。
20:00 帰宅 他にもやることを済ませて帰宅します。そういえばデプロイに失敗しているんでした。 適当に npm update します。直りました。よかったです。(本当は他にもいろいろ試しました。)</description></item><item><title>セキュリティ・ネクストキャンプに通過しました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/sec-next-camp/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/sec-next-camp/</guid><description>ネクストキャンプ通過しました。やったー。</description></item><item><title>RTTY のデコードを試す(4)</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-4/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-4/</guid><description>プログラムでの文字へのデコードを試す前に、サンプリングレートが 8kHz、 量子化ビット数が 8bit の unsigned な wave ファイルという制約を なんとか取り払えないか試してみます。
まず、サンプリングレートは簡単で、変数に入っている数値を変更するだけで 問題なさそうです。が、window_size も同じ比率で変更してあげないと、 出力に差が出てくるようです。 同じ比率を保つために、window_size はサンプリングレートの250分の1に して、出力が変化しないようにします。
ちなみに、サンプリングレートは wave モジュールで取得できるようです。 わざわざ変更するのも面倒なので、取得するようにしましょう。
また、unsigned を仮定しているのは、フレームの値から 128 を引いている 部分のようです。(量子化ビット数も関係ありますが。)
量子化ビット数を変更できるようにするには、今のフレーム(バイナリ)の 0番目の値のみを見ている所を変更する必要がありそうです。 Python のBuilt-in Types の、 int.from_bytes を 使えばよさそうです。 unsigned の制約も外すために、128 を引いている部分もビット数から計算して 引くように変更します。unsigned 8bit のときに -128 なのは、u8 が [0, 255] で、 その半分を引いて [-128, 127] にするためですね。同様に、unsigned 16bit であれば -(2^15) してあげればいいですね。signed であれば何も引きません。一般化すると、 n bit のとき、signed であれば -0、unsigned であれば -(2^(n-1)) ということに なります。
あとは愚直に実装して、ny-a/RTTY - GitHub に push すれば完了です。</description></item><item><title>GitHubのプロファイルをカスタマイズ</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/github-profile-metrics/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/github-profile-metrics/</guid><description>GitHub のプロファイルをカスタマイズできることは知っていましたが、 ユーザー名と同じ名前を付けたリポジトリの README.md が表示されていると いうことを知ったので、試してみました。
まだカスタマイズは試していませんが、とりあえず表示できるところまで 完了しました。
今日は GitHub Actions の Failed の通知が来ていたのでログを確認した所、 GitHub のコンテナレジストリが 503 エラーを吐いていたようでした。 GitHub のコンテナレジストリなんてあるんですね。初めて知りました。</description></item><item><title>Arch LinuxのCode-OSSの拡張機能</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/arch-vscode-extension-gallery/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/arch-vscode-extension-gallery/</guid><description>Arch LinuxのCode-OSSの拡張機能の検索先を変更する に書いてある通りなんですが、Arch Linux の code パッケージは OSS のもので、拡張機能のギャラリーは Open VSX Registry を使用しているようです。
Visual Studio Marketplace で検索した拡張機能が インストールできないと悩んでいたのですが、これが原因だったんですね。
調べてみた限りだと、ユーザーの設定ではギャラリーを変更できないようだったので、 一番始めのリンクの記事に書いてある通りに /usr/lib/code/product.json を書き換えると Visual Studio Marketplace から検索することができるようです。
これって複数指定できないんですかね？あまり VSCode の拡張機能のレジストリについては 詳しくないですが……。</description></item><item><title>rpi-vcsmが更新されました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/rpi-vcsm/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/rpi-vcsm/</guid><description>Idein/rpi-vcsm の issue #2 で vcsm-cma に対応していただけるとのことだったのですが、今日 GitHub から通知が来て、 なんともう対応していただけたようです。すごく早い……ありがたいですね。
早速最新のカーネルで試してみましょう。5.10.17-v7+ で試しました。
先に rpi-vcsm をインストールします。書いてある通りです。インストールできたら py-videocore の example を試してみましょう。
py-videocore の方にも PR が出されているので、フォークされたブランチ を clone してきます。あとは書いてある通りに試していくと……エラーが出ますね。
ImportError: libf77blas.so.3: cannot open shared object file: No such file or directory
numpy のインストール時の常識でしょうか……。sudo apt-get install libatlas-base-dev しましょう。
$ python3 examples/sgemm.py ==== sgemm example (96x363 times 363x3072) ==== threads: 12 numpy: 0.4205 sec, 0.5113 Gflops GPU: 0.0294 sec, 7.3126 Gflops minimum absolute error: 0.0000e+00 maximum absolute error: 9.</description></item><item><title>Git-Mediawiki</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/git-mediawiki/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/git-mediawiki/</guid><description>ArchWiki の編集で割とつらいのが、編集が textarea で行う必要があることです。 普段はあまり気にならないですが、サイズの大きいページを編集する際などは レスポンスの悪さが気になることもあります。
これが、テキストファイルをテキストエディタで編集するようにできたら 色々な問題が解決しそうです。また、revision の仕組みなどを考えると、 git などでバージョン管理をしてあげると嬉しいかもしれません。
そこで、「git mediawiki」などで検索してみると、やりたいことズバリの Git-Mediawiki という プロジェクトを発見しました。
git は perl に依存しているので驚くことでもありませんが、Git-Mediawiki も perl で書かれていて、perl の依存のインストールが必要です。 私は、各言語の依存パッケージでマシンの環境を汚したくないので、このような 場合には Docker イメージに閉じ込めてしまう場合が多いです。 いつも通り archlinux/archlinux ベースイメージから、git と各依存パッケージを インストールしてイメージを作成しました。
さて、早速 ArchWiki 日本語版を pull していきたいところですが、実際に やってみると途中で落ちます。author の特殊文字のエスケープが抜けていますね……。
あと、今まで気付いていなかったのですが、このプロジェクトは git-core に 取り込まれているようです。知名度はそんなに高くない気がしますが、 git コミッタの周りでの使用者が多いんでしょうか……。
とにかく、この場合パッチを送るのは git-core の方になりそうなので、 git の コントリビューションの方法 を調べるところから始めないと いけないですね。
設定項目としては、標準では標準名前空間のみ対象としているため、ArchWiki の 全ての名前空間を対象にするには、
git config remote.origin.namespaces &amp;quot;(Main) Talk User User_talk ArchWiki ArchWiki・トーク File File_talk MediaWiki MediaWiki_talk Template Template_talk Help Help_talk Category Category_talk&amp;quot;</description></item><item><title>RTTY のデコードを試す(3)</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-3/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-3/</guid><description>前回生成した csv から、文字へのデコードを試してみます。(2回目)
なんか調べてみると、ストップビットは1, 1.5, 2ビットのパターン？が あるようでした。 サンプルのファイルには1.5ビットって書いてあったような気がしたのですが……。
まあ、気を取り直して、0→1または1→0に変化する箇所を抽出して、 6ビット以内はデータと考えて無視すると、綺麗に7ビットごとに 並んでいるようでした。ストップビットは1ビットだったようです。
あとはプログラムを書いて、データ部5ビットごとに区切って出力すれば、 文字へデコードするのはかなり簡単になりそうですね。</description></item><item><title>GPU 上で FFT を計算する</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/fft-on-gpu/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/fft-on-gpu/</guid><description>GPU で何を計算するかのアイデアを探していたのですが、 よく考えたら FFT も GPU 上で計算できそうだと思って 少し調べてみました。
すると、2次元 FFT の話題が多いようでした。 2次元の周波数成分といえば、JPEG の圧縮に使われている やつですね……(あれは DCT ですが)。
数は比較的少なそうですが、FFT の並列計算に関する話題もありました。 GPU を用いた高スループット計算システムの実装 など。
実際に実装に進んで……といきたいところですが、まずは FFT を CPU で計算してみて (numpy にもあったはず)、 それを使うコードを書くのが先ですかね……。
……とここまで書いておいてあれですが、PyVideoCore の 作者の方の Qiita 記事 に
他の人が書いたFFT(公式サンプルとしてraspbianに収録)
……既にあるみたいですねw
GPU_FFT
これとかでしょうか。 バタフライ演算の図なんかもあり、FFT の知識がなくても これを読むだけで勉強になりそうです！(？)</description></item><item><title>RTTY のデコードを試す(2)</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-2/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/rtty-2/</guid><description>前回生成した csv から、文字へのデコードを試してみます。
ゆくゆくはプログラム書いてデコードしたいですが、一旦コードの 仕様確認なども兼ねて csv 上で挑戦します。
まず、0/1の2値化された値は、かなり安定しているようです。 RTTYでは一般的に 45.45Baud を使用するようなので、 8kHz だと 45.45 で割ると 176 フレームごとに1ビットという感じでしょうか。 また、一般的に使われている文字コードは Baudot code で、5bit で表現されて いて、各文字にスタートビットとストップビットがそれぞれ1, 1.5ビットの長さで 付加されているようです。
とりあえず、だいたい176回同じ値が連続するごとに区切ってみると、定期的に 中途半端な部分が出てきそうです。 試してみると……、めちゃめちゃ綺麗にアライメントされていて、半端なビットは なさそうでした。
早速困ってしまいましたが、今回のサンプルは幸い値が詳しくコメントされています。 ほぼ反則ですが、一度文字の方からバイナリ列に当てはめて考えてみようかなと 悩んでいます。
いや、それよりも FFT する方法で、諸々のパラメータが分からない場合にでも 使用できるデコーダを書くのを先に進めた方がいいかもしれません。
まあ、何か重大なことを見落としているなんてこともしょっちゅうなので、 諦めずに挑戦してみるのも大事かもしれません。</description></item><item><title>uimのビルドエラー</title><link>https://ny-a.github.io/hugo-blog/posts/2021-06/uim-build-error/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-06/uim-build-error/</guid><description>AUR の uim パッケージに、ビルドが失敗するという コメントをいただきました。
しかし、手元の Docker 環境でビルドしてみたところ、正常にビルドを完了することができました。
ビルドエラーは csi というコマンドで発生しているようで、手元のビルド環境にはこの実行ファイルは 存在していませんでした。 Makefile.in ファイルを確認した所、ビルド時に csi 実行ファイルが存在していればそのコマンドが 実行されるようになっていました。
Arch のパッケージで /usr/bin/csi が含まれているものを探してみると、
$ pacman -Fy $ pacman -F /usr/bin/csi usr/bin/csi is owned by extra/mono 6.12.0.107-1 どうやら mono に含まれているようでした。 error CS2006: Command-line syntax error: Missing '&amp;lt;text&amp;gt;' for '-R' option というエラーも、 検索してみた限りでは mono のエラーと考えてよさそうです。
ただ、uim は mono に依存していないようなので、この csi は mono に含まれているバイナリを 期待しているわけではなさそうです。GitHub の issue を探してみると、#26 で csi について言及されていました。 これによると、Chicken Scheme のインタプリタが csi という名前のようです。</description></item><item><title>ChromiumをDockerコンテナ内で実行する</title><link>https://ny-a.github.io/hugo-blog/posts/2021-05/chrome-in-docker/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-05/chrome-in-docker/</guid><description>Chromium を Docker コンテナ内で安定して動かすことができるようになったので 方法をメモしておきます。
ny-a/chrome-in-docker
上記リポジトリで docker-compose up --build すれば済むのですが、解説します。
SYS_ADMIN は chrome が namespace の操作権限を必要とするので付けています。 --no-sandbox オプションをつけて chrome を起動することでも対処はできますが、非推奨です。 どちらもないと、Failed to move to new namespace というエラーが出ます。 (sysctl から設定を変更することでも可能なようですが、Arch標準のカーネルの設定で起動することを考えています。) 参考: jessfraz/dockerfiles #350
network_mode: host は、ホストの X11 サーバーに直接ウィンドウを表示するために必要です。
devices: /dev/snd があると音が出ます。環境によっては ALSA の設定なんかを Docker 内から 見えるようにする必要があるかもしれません。
${XAUTHORITY}:/home/user/.Xauthority ボリュームは、X11 の認証に必要です。
DISPLAY 環境変数は、X11 サーバーが複数立ち上がっているときに区別するために必要です。 まあほとんどの環境で :0 にしておけば問題ないはずです。
docker-compose を使いたくなければ、
docker build . -t chrome docker run --rm -te DISPLAY=$DISPLAY --net host -v ~/.</description></item><item><title>Docker 内で uim が使えました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-05/uim-in-docker/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-05/uim-in-docker/</guid><description>前から Docker 内で Chromium などの GUI アプリケーションを動かそうと試みていたのですが、 (当然ですが)日本語入力はホストのものを使えず、何か方法がないか探していました。
結局のところ、Docker 内にも uim をインストールすればきちんと動くようでした。 設定やらの同期が面倒かと思ったのですが、~/.uim.d をボリュームマウントすれば ほぼ同等の操作感で使用できるため、問題ないかなと思いました。
IME の開発時には逆に便利かもしれません。</description></item><item><title>RTTY のデコードを試してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2021-05/rtty/</link><pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2021-05/rtty/</guid><description>セキュリティ・ネクストキャンプに応募しようと思うので、その講義の中で扱われる RTTY について少し試してみようと思いました。
講師の方のプロジェクトは imaoca/RTTY - GitHub にあります。
ここでは、サンプルの音声ファイルとして Wikipedia の RTTY.ogg を 使用します。
ただ、このままでは使用できず、このプロジェクトのスクリプトで仮定されているフォーマットに 変換する必要があります。
サクっと ffmpeg を使って 8KHz sampling, mono, 8bit quantization, and no sign な wav ファイルに 変換しましょう。
ffmpeg -i RTTY.ogg -ar 8k -c:a pcm_u8 -f wav rtty3s.wav -i の後の ogg ファイルが入力、-ar がサンプリングレート、-c:a で量子化ビット数と符号なしを指定して、 -f で wav フォーマットを指定、最後に出力先ファイル名です。
あとは README の Usage に従って、
python rtty8k.py &amp;gt; rtty.csv を実行すれば、Excel なんかで読み込んでグラフ化することができるでしょう。
詰まった所 wav ファイルのフォーマットです。 サンプリングレートについては、始めは元ファイルの48kHzのままにして、プログラム側のパラメータ修正で なんとかしていたのですが、フォーマットは pcm_s16le のままだとダメでした……。
普段 pcm_u8 なんて使わないので。。。README は穴が開くくらい読みましょうという感じでした。</description></item><item><title>Amazon の翌日お急ぎ便</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/amazon-1day-express/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/amazon-1day-express/</guid><description>時々 Amazon で購入するのですが、都内に住んでいると ほとんどの商品が翌日には届くのが当たり前のようになっています。。
ただ、帰省などで他の県などに滞在すると、余分に1日程度 かかることも多く、普段の便利さを実感しています。
当日お急ぎ便は本当にすごいですよね。 寝る前に注文したものが午後には届くという、 自社配送ネットワークの強さを感じます。</description></item><item><title>イオンのコピー機でのマイナポイントの申請</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/myna-point-from-copier-in-eaon/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/myna-point-from-copier-in-eaon/</guid><description>イオン系列のスーパーにあるコピー機に、マイナポイントの 申請ボタンがありました。
私は既に申請済みなので使うことはないのですが、 waon での申請が可能なようでした。</description></item><item><title>GPG エージェントが SSH エージェントとして機能しない</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/cant-use-gpg-ssh-agent/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/cant-use-gpg-ssh-agent/</guid><description>GPG エージェントを SSH エージェントとして使用するように 設定していたのですが、いつのまにか動かなくなってしまって いました。
仕方がないのでこのポストも GitHub の Web ページから 書いています。
最近セキュリティ系のライブラリの更新がいくつかあった ようなので、その関係かなと思っています。</description></item><item><title>pam_tally.so</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/pam-tally/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/pam-tally/</guid><description>使っている PC で pam_tally.so を有効化していたようなのですが、 いつのまにか pam_faillock.so になっていたようでした。
更新したら pam_tally.so が消えていてログインできなくなって焦りました。</description></item><item><title>やさしいせかい</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/yasashii-sekai/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/yasashii-sekai/</guid><description>やさしいセカイ (言いたかっただけ)</description></item><item><title>AUR の リクエストの調べ方</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/aur-request/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/aur-request/</guid><description>AUR のパッケージのページには、現在のリクエスト数が表示されていますが、 リクエストの種類や内容は表示されていません。
使っているメーラーの検索機能があまり賢くないのか、 aur-request は購読しているものの検索してもうまく見つけられませんでした。
仕方がないので pipermail のアーカイブから検索して見つけました。 できればリクエストの種類くらいは表示できたら……と思うので、 時間のあるときに aur-web の当該部分のコードを見てみようと思っています。</description></item><item><title>containerd のバグ</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/containerd-issue/</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/containerd-issue/</guid><description>昨日 containerd を更新したのですが、docker で コンテナが起動できなくなってしまいました。
パッケージの問題だったようで、すぐに問題は修正されたの ですが、使っているミラーが古くなっていたようで、 少しの間ハマっていました。
ミラーも定期的に確認しないといけないですね。</description></item><item><title>PostgreSQL の UUID タイプ</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/postgresql-uuid-column-type/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/postgresql-uuid-column-type/</guid><description>PostgreSQL に UUID タイプがあることを知りました。
ORM がしょぼい (失礼) と実装に疲れてくるので、こういう 機能があると助かります。
いやまあ強い ORM 使えばいいんですが。Slick 使いたい……。</description></item><item><title>シャープのマスクに当選しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/won-sharp-mask/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/won-sharp-mask/</guid><description>前にシャープのマスクの抽選に応募していたのですが、 忘れた頃に当選しました。
割と店頭でも購入できるようになってきましたが、 それなりに高品質そうなので購入しようと思っています。</description></item><item><title>QUICPay モバイルの終了</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/end-of-quicpay-mobile/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/end-of-quicpay-mobile/</guid><description>QUICPay モバイルが来年終了するようです。
私も Google Pay で QUICPay を利用しているので、 利用者が少ないのも頷けます。
そういえば Visa の PayWave も終了してしまいましたね。 JCB のコンタクトレスは……</description></item><item><title>Sony と Raspberry Pi の業務提携</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/raspberry-pi-and-sony/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/raspberry-pi-and-sony/</guid><description>Sony と Raspberry Pi が教育分野で業務提携するようです。
元々 Sony の工場で生産されていた気がするので、特に 驚くような話ではないような気もしますが、 Raspberry Pi が元々の目的で使用されるようになってきたのは いいことだと思いました。</description></item><item><title>Mozilla のレイオフ</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/lay-off-of-mozilla/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/lay-off-of-mozilla/</guid><description>Mozilla が大規模のレイオフを実施したようです。
非営利の企業にもここまで影響があるとは思いませんでした。</description></item><item><title>クリックしてから遷移するのが遅いリンク</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/slow-link/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/slow-link/</guid><description>PASMO のサイトを見ていたら、クリックしてから遷移するのが遅いのが 気になりました。
他のサイトでもたまにありますが、普通の a 要素を使っていればこんなに 遅延は発生しないはずです。
見てみると、span 要素を使っていて a 要素は使っていないようでした。 vendor.js には jQuery が入っていて、span 要素にはクリックイベントは 付いていなかったので、jQuery 側でクリックイベントを拾って頑張っている 感じなのでしょうか。
アクセシビリティの面からも問題があるような気がしていますし、 ページ間遷移はできる限り a 要素を使いたいなと思いました。</description></item><item><title>Dynabook が Sharp に買収されていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/sharp-dynabook/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/sharp-dynabook/</guid><description>いつのまにか Sharp に Dynabook を売却していたようです。
でも IGZO 搭載モデルは各社から出ているので、あまり検討は しないかなと思っています。</description></item><item><title>マイナンバーカードと健康保険証</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/my-number-card-with-universal-care/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/my-number-card-with-universal-care/</guid><description>マイナンバーカードを健康保険証として使えるようになりますが、 その予約がマイナポータルからできたので済ませておきました。
2021/03 を目処にマイナンバーカードを一部の医療機関で健康保険証 として使えるようになる予定です。
予約の手順は、マイナポータルにログインし (マイナンバーカードと 利用者証明の暗証番号が必要)、トップにある健康保険証のメニューから 予約を実行する (同じ暗証番号) だけです。
申請書のようなものを入力して電子署名するのかと思っていたのですが、 かなり簡単な手続きでした。</description></item><item><title>郵便局でのキャッシュレス決済</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/cashless-in-post-office/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/cashless-in-post-office/</guid><description>一旦延期になっていた郵便局へのキャッシュレス決済の導入ですが、 気付かない間に再開されていたようです。
早い局では7/7あたりから導入されていたようで、8月までに3割程度の 局で導入されるようです。
現金しか使えない機会がますます減っていくのはとてもよいことだと 思います。</description></item><item><title>夏</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/summer/</link><pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/summer/</guid><description>あつい</description></item><item><title>ArchLinuxArm でのディスク暗号化</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/encrypted-archlinuxarm/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/encrypted-archlinuxarm/</guid><description>普段使いの ArchLinux のマシンでは、GRUB を使用したフルディスク暗号化を 使用しているのですが、ArchLinuxArm ではどうしようかなと考えています。
initcpio での encrypt フックで、/boot 以外の (ルートパーティションの) 暗号化を検討しています。
ssh を使用したネットワーク経由のパスワード入力も利用できそうですが……。 一旦はキーボードを接続しての暗号化を試してみようと思います。</description></item><item><title>URxvt と uim の問題</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/urxvt-with-uim/</link><pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/urxvt-with-uim/</guid><description>普段 URxvt と uim を使っていて、時々 URxvt 上で日本語入力をするのですが、 最近 URxvt 上で uim が有効にならないなと思っていました。
どうやら libx11 のバグ？のようでした。 FS#67461
更新して再起動した後と思っていたときには改善していなくて、 何度か再起動した後にいつのまにか直っていました。
時々しか使っていないですが、直ってよかったです。</description></item><item><title>ディスクイメージのバージョン管理</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/version-control-of-image/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/version-control-of-image/</guid><description>コードのバージョン管理は当たり前のようにしているのですが、 コードとそれを動かす OS を全て含めたディスクイメージは なかなか管理が難しいなと思いました。
時代はサーバーレスのコードオンリーですが……。</description></item><item><title>シャープの開発した適温蓄冷剤</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/sharp-cool-keeper/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/sharp-cool-keeper/</guid><description>sharp の開発した tekion という素材を知りました。
幅広い温度帯で一定の温度を保つことができる素材を 作ったということで、sharp の研究開発はすごいなと 思いました。</description></item><item><title>疲れた</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/tired/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/tired/</guid><description>&amp;ldquo;iconv は不均等に千切れた昆布です&amp;rdquo; とか書いてブロックされたい。</description></item><item><title>キングジムの Freno</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/freno/</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/freno/</guid><description>キングジムから電子ペーパー搭載の電子ノートが発売されていました。
早速展示を体験しにいったのですが、なかなか完成度が高いなと 思いました。
でも iPad と Apple Pencil の組み合わせには敵いませんが……。 (画面の更新速度など。)</description></item><item><title>PayPay 銀行</title><link>https://ny-a.github.io/hugo-blog/posts/2020-08/paypay-bank/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-08/paypay-bank/</guid><description>ジャパンネット銀行ですが、三井住友系なので突飛なことはしないと 思っていたのですが、驚きの社名変更ですね……。
カード型のトークンが便利だったりコンビニ ATM の手数料が安かったり 気に入っていたのですが、考え直そうかなと思ってきました。</description></item><item><title>新しい PC への GPG キーの移動</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/copying-gpg-keys/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/copying-gpg-keys/</guid><description>新しい PC のセットアップや、使っている PC の再インストールで、 環境を移行するときにはデータの移動が必要になりますが、 GPG キーなどは安全に移動する必要がありそうです。
PC 間の機密情報の移動といえば、定期的にやっているはず (？) の GPG キーの有効期限の更新と、それに伴う GPG キーのやりとりがあり、 それ以外の情報は GPG で暗号化さえすればアップロードしておける (はず？) なので、GPG キーさえ普段の方法で受け渡しできれば 問題ないですね。
まあ、YubiKey 使えばいい話なんですが、パスフレーズ打つ方が手軽で……。</description></item><item><title>緊急地震速報</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/etws/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/etws/</guid><description>久しぶりに珍しく過大な警報が出ましたね。
基本的に地震は正確な予測ができないものだと思っていて、 あくまで実験的な予報だと考えていたので、誤報については 特に何も思っていません。
ただ、(もちろんデメリットもありますが)地震動の予報業務について もう少し裾野を広げて情報技術系の参入を促してみたらどうかなと いう気持ちはあります。</description></item><item><title>Git 2.28 リリース</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/git-2-28-release/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/git-2-28-release/</guid><description>Git 2.28 がリリースされたようです。
個人的な注目ポイントは、switch サブコマンドのシェル補完が追加 されたことでしょうか……？と思ったのですが、手元の2.27でも 普通に動いているのでよくわかりませんでした。
ニュースに取り上げられていたのは、デフォルトのブランチ名の 設定が増えたことでしょうか。 はい、まあ、選択肢が増えることはいいことなんじゃないですかね。</description></item><item><title>Intel Core i7 10世代と8世代の差</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/intel-core-i7-10th/</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/intel-core-i7-10th/</guid><description>8世代の i7-8565U を搭載した PC の新モデルで、 10世代の i7-10510U を搭載した PC がありますが、 ベンチマークの結果などを見ているとあまり変わりないような 気がしていて、新モデルのメリットをあまり感じられていません。
プロセスルールも同じなようですし、若干の性能の 向上はあると思いますが、旧モデルの方が値引きされているのであれば 旧モデルでもいいのかなと思いました。</description></item><item><title>Ryzen 搭載ノート PC のキャッシュバック</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/ryzen-cashback/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/ryzen-cashback/</guid><description>Ryzen 搭載ノート PC を購入したのでキャッシュバックキャンペーンに 申し込んでいました。
ローソンで受け取ってみましたが、レジから出金するというのはあまり ないので慣れないですね。 現金のやりとりなんかはセブン ATM が強いイメージがあるのですが、 受け取りのサインなど対応できないのでしょうか。</description></item><item><title>10GbE スイッチの価格</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/10gbe-switch/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/10gbe-switch/</guid><description>いつの間にか 10GbE スイッチの価格がポートあたり1万円を切るように なっていました。かなり導入しやすくなったのではないでしょうか。
といってもインターネット接続もまだ 10Gbps ではないですし、 高速な NAS もないので導入するつもりはありませんが。</description></item><item><title>GRUB の LUKS サポート</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/grub-luks/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/grub-luks/</guid><description>GRUB が LUKS 1のみサポートしていることをすっかり忘れていて、 久しぶりに Arch のインストールをする際にハマってしまいました。
LUKS 2サポートはまだリリースされていないようで、現在 pacman から インストールできるバージョンでは LUKS 1のみが使用できるようです。 LUKS 2を使用すると、暗号化パーティションとして認識されず、root パーティションが認識されなくなってしまいます。
wiki の記述通り、--type luks1 を付けてフォーマットするときちんと 認識されるようになりました。</description></item><item><title>仮想コンソールの切り替えで画面が乱れる</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/change-virtual-console/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/change-virtual-console/</guid><description>普段は Linux デスクトップを使用しているため、 Linux の仮想コンソールを使うことは少ないのですが、 時々使用します。そういうとき、大抵は screen などの マルチプレクサを使うことが多いですが、 Ctrl+Alt+F1-6 を使って仮想コンソールを切り替えることも 時々あります。
こういった切り替えがカーネルでどのように扱われているのか までは調べていないのですが、Intel Graphics 620 を搭載した ノート PC でこの切り替えをしていると、eDP で接続された 内蔵ディスプレイが固まってしまう現象に遭遇しました。
Intel Graphics 620 を搭載している他のノート PC では この現象は起きないようなので、他の部分が原因なのかもしれませんが、 検索してみても同じような症状は見かけませんでした。
スリープに入ったり再起動すると一応は復旧するため、 とりあえずの使用は問題ないのですが、画面が暗いとチラついたり するようになってしまっており、ハードウェアへのダメージが心配に なっています。
Windows で再現できれば修理依頼をしようと思っているのですが、 今のところどうも Linux 側の問題のような気がしています……。</description></item><item><title>4連休</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/4-days-holiday/</link><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/4-days-holiday/</guid><description>今日から4連休ですね。実感はありませんが。
いくつか電話しないといけない手続きがあったのですが、 すっかり忘れたまま週末になってしまいました。 来週忘れないように済ませようと思います。</description></item><item><title>GitHub の Arctic Code Vault Contributor になっていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/frozen-github/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/frozen-github/</guid><description>気付いたら Arctic Code Vault Contributor になっていました。
HelloWorld がほとんどですが……。</description></item><item><title>ヤマト延長保証からメールが届きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/yamato-warranty/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/yamato-warranty/</guid><description>修理依頼を出していたディスプレイの診断結果が出たようでメールが届いていました。
分かっていたのですが、液晶が割れていたため、新品を購入するよりも 修理する方が高額との見積りが出ていました。
今後は修理規定に基づいて、保証金額範囲内での同等品の新品を送付していただける ようです。
なんだかんだ、それぞれのステップで1週間くらいかかるような印象を受けました。 メーカー保証を延長できるのであればその方が修理依頼なんかは楽だと思います。</description></item><item><title>BLUNT の傘</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/blunt-umbrella/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/blunt-umbrella/</guid><description>BLUNT の傘を前使っていたのですが、3年程前から調子が悪く、 ビニール傘や普通の傘を使うようになっていました。
そろそろ BLUNT で買い替えようかなと思って商品を探していたら、 レビューに雨漏りがすると書いてありました。
そういえば漏れてくるんですよねー。傘が強いのはいいんですが。</description></item><item><title>体調不良</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/feel-sick/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/feel-sick/</guid><description>朝から体調不良で今日しようと思っていた予定が崩壊しました……。
Blog 書いている場合ではないので今日もお休みしちゃいます。
うそ、クロネコ延長保証からメールが来てました。 ……まあ明日でいいや。</description></item><item><title>お休み</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/obituary/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/obituary/</guid><description>訃報がありましたので本日の post はお休みとさせていただきます。</description></item><item><title>最近の日本語版 ArchWiki の編集状況</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/archwiki-editors/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/archwiki-editors/</guid><description>最近は ArchWiki を編集する人がかなり減っていたように思いますが、 私が編集を続けていたことも影響しているのか (買いかぶりすぎ？)、 ここ1週間くらいは海外の方も編集に参加してくださったり、管理者や メンテナの方々も割と編集してくださっていたり、かなり改善の兆しを 見せ始めているように思っています。
とはいえ私は割ける時間がかなり少なくなっており、少しずつの編集しか できていません……。私の中途半端な編集の尻拭いというか、付随する修正を してくださる方々には頭が上がりません。本当にありがとうございます。</description></item><item><title>ArchWiki-jp のビューロクラット権限を得ました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/bureaucrat-of-archwiki-jp/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/bureaucrat-of-archwiki-jp/</guid><description>最近あまり編集に時間を割けず、毎日の編集は続けていますが 量はかなり少なくなっていてすいません。と思っていたのですが……
管理者権限をいただいたのでこれからも頑張って (頑張りすぎないで) 編集を続けていこうと思います。</description></item><item><title>連続編集日数の UTC による集計の被害者の会</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/streak-by-utc/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/streak-by-utc/</guid><description>はい、私も引っ掛かりましたが皆さんも引っ掛かってしまったようですね……。
まあ連続編集日数のために編集しているわけではないので淡々と編集を 続けていきましょう。という感じです。</description></item><item><title>エウ゛ァパソコンの在庫が復活していました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-revival/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-revival/</guid><description>日曜日の夜には在庫が0になっていたのですが、いつのまにか 80台くらい復活していました。
いつまで購入できるかなど問い合わせて教えてくれるのでしょうか……。</description></item><item><title>エウ゛ァパソコンが売り切れていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-sold-out/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-sold-out/</guid><description>エウ゛ァパソコン売り切れちゃいましたね……。 数量限定とのことでしたが、これで終わりなんでしょうか。</description></item><item><title>ArchWiki-jp の連続編集が100日になりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/arch-wiki-jp-streak/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/arch-wiki-jp-streak/</guid><description>何度かヒヤヒヤしましたが、途切れなくてよかったです。
まあ、これからも騙し騙し続けていきますが……、 初期のようにうまく時間を確保できていないので、1日 1セクションのような感じが続くかもしれません。
引き続きよろしくお願いいたします。</description></item><item><title>ATM の千円両替ボタン</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/change-into-1000-yen/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/change-into-1000-yen/</guid><description>最近は現金を使うこともかなり減ってきていて、ATM を使うことも ほとんどなくなってきましたが、0ではありません。
1万円札だけしか持っていないと面倒なこともあるので、ある程度の 千円札を財布に入れているようにしているのですが、 普段千円札が欲しいときは9千円追加で下ろすようにしていました。 もちろん、千円両替ボタンがあればそちらを使いますが。
今日はぼーっとしていて9千円追加した上で千円両替ボタンを押して しまったのですが、千円札が19枚出てきたので少し驚きました。
なんとなく千円札の出金上限が10枚だと思っていただけなのですが、 もっと現金を使っていた時に知りたかったような気もします。</description></item><item><title>エウ゛ァコラボ PC が発売されたようです</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-edion/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv-edion/</guid><description>実物を見てから購入を検討しようと思ったのですが、 都内のエディオンで店頭販売はない？とのことでした。
大阪本店なんかでは展示しているようですが……</description></item><item><title>英単語 liken</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/liken/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/liken/</guid><description>〜になぞらえる、といった意味のようですね。
割と簡単そうな単語ですが、今まで見たことがないような気がして、 やはり英語に触れるのが技術系に偏っているからかな……と思っています。</description></item><item><title>cactus</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/cactus/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/cactus/</guid><description>サボテンという意味の英単語のようですね。
名詞なんかはギリシャ語由来だったりするので永遠に苦しみ続ける気が しています。
……とはいえ、今回の場合はユーザー名っぽかったのですが。</description></item><item><title>Billz のスポンサーになりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/sponsor-of-billz/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/sponsor-of-billz/</guid><description>Raspap-webgui の開発者が GitHub Sponsor を募集していたのでスポンサーに なりました。
翻訳なんかもしたいのですが、なかなか手が回らず……。</description></item><item><title>NERV 仕様のノート PC</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv/</link><pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/uh90nerv/</guid><description>富士通から NERV 仕様のノート PC が発売されるようです。
個人的には SSD 1TB も必要ないので、SSD くらいは選べるように してほしいなと思いました。
コスト回収の観点からは妥当だとは思いました。</description></item><item><title>東京都知事選</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/tokyo-governatorial-election/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/tokyo-governatorial-election/</guid><description>今日は東京都知事選の投票日ですね。 前回の都知事選のときは千葉に住んでいたので、政見放送などは見かけましたが 投票は初めてです。
とはいっても、分散投票を推奨されていたので、もう期日前投票を済ませて いるのですが。
透明な板越しにやりにくそうに用紙を渡していただきましたが、当日までに 慣れたのでしょうか。見に行ってもいいのですが明らかに不審なので やめておきます。</description></item><item><title>若者言葉</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/young-wording/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/young-wording/</guid><description>銀行で手続きをしてきたのですが、対応していただいた行員の方の 言葉遣いが少し気になりました。
まず、本人確認で身分証の顔写真の確認で、マスクを「一瞬」外すように 言われました。まあそれは一瞬だったのでよかったのですが、 キャッシュカードの再発行の説明のとき、カードを「一瞬」預かって 更新カードを郵送する、と言われました。
私もそこまで年齢は変わらないと思いますし、一瞬という言葉も使うことは あるのでそこまで気になったり直してほしいと思ったりはしないのですが、 郵送は一瞬ではないのでは……と思いました。
あと窓口でネットバンクのログインをすることになったのも少し驚きました。 本人確認しているので ID とパスワードなしでログインできてもいいような 気もしますが……。</description></item><item><title>クレジットカード決済時の暗証番号からのフォールバック</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/credit-card-sign-fallback/</link><pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/credit-card-sign-fallback/</guid><description>最近クレジットカードの暗証番号を乱数に変更したのですが、 見事に忘れてしまい、レジで困ったのですが、 店舗によってはサイン取引にさせていただけるようでした。
先日「暗証番号を忘れたのでサインにさせて欲しい」と 言っている方を見かけた際は、店員さんに断られていたので、 IC 取引のときは暗証番号でしか認証できないのかと思っていました。 しかし、今回は、暗証番号を入力せずに確定を押すことで、 wacom のペンタブレットによるサイン取引にフォールバックして 決済を完了することができました。
サイン用タブレットなどの設備があるかどうかによって 変わるんでしょうか。まともな (？) カード決済端末は あまり使ったことがないのでよく分かっていません。</description></item><item><title>マイナポイントへの JRE POINT の申し込み方法</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/myna-point-with-jre-point/</link><pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/myna-point-with-jre-point/</guid><description>マイナポイントはポイント事業者？側から申し込むこともできると いうことを見かけたので、JRE POINT で調べてみたところ、 JRE POINT 側からの申し込みにも対応する予定とのことでした。
具体的には、9月以降にセブン銀行 ATM で Suica をスキャンすることで 申し込みが可能になるようです。
個人的にはセブン銀行 ATM でできることが増えるのは嬉しいので、 こういったものはどんどん増やして欲しいと思いました。 まあ、もう申し込んでしまったので使うことはないんですが……。</description></item><item><title>マイナポイントに申し込みました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-07/myna-point/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-07/myna-point/</guid><description>マイナポイントの申し込みが今日からだったので申し込んでみました。
申し込んだ後に気付いたのですが、8月に入ってから事業者が増える予定で、 一度申し込んだ後に変更はできないようなので、1ヶ月程度待った方が よかったのかもしれませんでした。
あまり期待していないので気にしていないですが……。</description></item><item><title>今年の半年を終えて</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/half-of-year/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/half-of-year/</guid><description>今年ももう半分が過ぎてしまいました。今年は COVID-19 の感染拡大など 大きなイベントが多かったように思います。
と言っても、私は今まで通りリモートで家から仕事をすることが多く、 外出している人の数やイベントの開催方法などで変化を感じていましたが、 仕事や生活ではあまり変化を感じませんでした。
これからも働き方改革など、よりよい社会のために変わっていけばいいなと 思いました。</description></item><item><title>ほぼ日曜日の MOTHER イベントに行ってきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/hobo-nichiyoubi-mother/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/hobo-nichiyoubi-mother/</guid><description>渋谷にあるほぼ日曜日で、MOTHER のイラストの展示があったので 見に行きました。
並んで整理券をもらうことになるかと思っていたのですが、 一部時間帯を除いてそのまま入場できることが多かったように 思います。
スムーズに入場でき、ゆっくり見られるのは嬉しいですが、 もう少しにぎやかなことを期待していたので少し残念に思いました。</description></item><item><title>Amazon の ヤマト延長保障のメールが届いていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/amazon-extended-warranty-mail/</link><pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/amazon-extended-warranty-mail/</guid><description>Amazon の延長保障の申請をした後、しばらく待っても音沙汰がないと思っていたのですが、 Amazon のメッセージで Amazon に登録しているアドレスに連絡が来ていました。
また、電車に乗っていたので出られなかったのですが、それから1週間程度経ったあとに 電話が掛かってきました。
メールに返信したのでこれから手続きが進むことを期待していますが、また Amazon の メールアドレスに届くのでしょうか。
メールアドレスの変更をすればいいんですけどね……。</description></item><item><title>ARM が搭載される新しい Mac</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/new-mac-with-arm/</link><pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/new-mac-with-arm/</guid><description>新しい Mac には Intel というか x86_64 アーキテクチャではなく ARM64 アーキテクチャのプロセッサが搭載されるというようなことを 知りました。
しばらくは Mac を買うつもりはないのであまり関心はないのですが、 arm の開発用マシンのシェアが増えて OSS のバイナリなんかの提供率が 上がれば嬉しいなとは思いました。
OSS のプロジェクトだと CI や配布が無料なサービスもあるので、 依存を解決したりビルドスクリプトを書くくらいでそこまで大変では ないと思っています。
まあただ arm でどこまでパワフルな処理ができるかは知らないので、 そのあたりが十分だと嬉しそうだなと思いました。</description></item><item><title>渋谷駅の埼京線のホームを見てきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/shibuya-saikyo-line/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/shibuya-saikyo-line/</guid><description>ホームが移動した渋谷駅の埼京線ホームを見てきました。 確かに前は遠かった記憶があるので、横並びになって 近くなってよかったですね。
といってもあまり使いませんが……。</description></item><item><title>GitHub の新しいインターフェース</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/github-new-interface/</link><pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/github-new-interface/</guid><description>twitter アカウント欄が追加されたりして、GitHub のインターフェースが 新しくなったようですが、contribution の芝の色も少し変わったように 思いました。
ただ、個人的には前の方がよかったかな……と思いました。</description></item><item><title>GitHub のプロフィールに twitter アカウントが増えていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/github-twitter-profile/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/github-twitter-profile/</guid><description>twitter で少し話題になっていたように思いますが、GitHub の プロフィールの設定画面に twitter アカウントの入力欄が 増えていました。
早速自分の twitter アカウントを設定してみました。
twitter の利用者が多いのはなんとなくイメージできますが、 GitHub が特定の SNS へのリンクを提供するのはなんだか 今までイメージしていなかったので驚きました。</description></item><item><title>syui さんにアイコンを提供していただきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/new-icon-from-syui/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/new-icon-from-syui/</guid><description>最近あまり活発に活動しておらず、twitter 以外はアイコンも 設定せずに放置していたのですが、syui さんにアイコンを 提供していただきました。ありがとうございます！
早速 GitHub と Slack に設定しておきました。
今までイラスト系や写真などのアイコンばかり使っていたので、 ベクターっぽい画像は実ははじめてだったりします。
まだまだ新しいアイコンに慣れていないので毎回自分であれっ？と なっています。
あと、GitHub のナビバーの表示はすごく小さいので帽子とかに 見えるなーと思いました。 AWS のサービスのアイコンにありそう(？？？？)</description></item><item><title>GitHub Sponsors をしばらく続けてみて</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/github-sponsor/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/github-sponsor/</guid><description>GitHub Sponsors を多分2ヶ月くらいになりますが、特に何か 変わったことはないですね……。
月1ドルの Receipt がメールで届くくらいですね。 クレジットカードの請求も、クラウドサービスの請求と並んでいて 違和感がないので、特に何も感じていません。
……という何の情報もないポストでした。</description></item><item><title>GU とエヴァのコラボ T シャツが売っていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/collaboration-of-gu-and-eva/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/collaboration-of-gu-and-eva/</guid><description>ユニクロの UT でエヴァの T シャツがあるのは知っていたのですが、 GU からも出ていることを知りました。
ただ、行った御徒町の GU はあまり種類がなかったように思いました。 西側の方が品揃えよかったりするんですかね？</description></item><item><title>COVID-19 接触確認アプリが配信されました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/cocoa-app/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/cocoa-app/</guid><description>COVID-19 の感染が確認された人との接触履歴を通知してくれるアプリの 配信が開始されました。
Play ストアは配信開始申請？をしてから実際に配信が開始されるまで 4時間近くかかったということでしょうか。 今まであまり時間まで指定して配信開始というリリースを見たことが ないので分からないですが……。
というか、時間まで出しておく必要はあるのでしょうか？ 実際に配信が開始されてから twitter などで告知すればほとんどの場合 十分なように思いました。
まあ、厚労省が twitter で配信されたよ〜って告知するかと言われれば…… ですが。</description></item><item><title>Amazon の延長保証の申請をしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/amazon-extended-warranty/</link><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/amazon-extended-warranty/</guid><description>ディスプレイが壊れたので保証申請をしてみました。
Amazon に購入情報を確認するのに1週間程度かかるようなので、 しばらくは壊れたディスプレイと同棲することになりそうです。</description></item><item><title>subscribe の意味</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/meaning-of-subscribe/</link><pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/meaning-of-subscribe/</guid><description>subscribe という英単語を購読するという意味と認識していたのですが、 他にも意味を持っているようだったので驚きました。
寄付する、署名する、などの意味を持っているようですね。 sub+scribe と考えるとイメージはつきますが、今まで考えたことも ありませんでした……。
よく使う英単語でも知らなかった意味を持っていることはよくあるので、 まだまだ勉強不足を感じますね……。</description></item><item><title>Fitbit から普通の腕時計に変えました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/unsmartize-watch/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/unsmartize-watch/</guid><description>しばらく Fitbit をつけて生活していたのですが、新しい腕時計を買って つけてみたら満足してしまったので Fitbit をつけなくなりました。
時間が常に表示されているとやっぱり違うものですね。 Apple watch で常時表示ができるようになったときも同じような感想を よく見かけましたが、確かに……となりました。
Wena wrist も検討していたのですが、スマートフォンを持たずに 出かけたり買い物をしたりすることもあまりないので、とりあえずは 不要かなと思っています。
通知機能は……今のところ通知に常に即座に対応しなければいけないわけでは ないため不要かなと思いはじめました。仕事中なんかはスマートフォンの 通知に気付かないことはないですし。
ただ、もっと Suica に対応しているスマートウォッチの選択肢が増えて ほしいなとは思います。wena……</description></item><item><title>ArchWeb-jp にレビューのボットが追加されていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/archweb-review-bot/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/archweb-review-bot/</guid><description>ArchWeb に新しいニュースが追加されると、それを翻訳して ArchWeb-jp に PullRequest を投げるわけですが、確かにレビュー側からすると原文や 機械翻訳の内容と比較できる方が親切でしたね……。
こういうサポートをぱっと思いついて実装できるのってすごいなあと 思いました。
あと、sqlint ははじめて知りました。あんまり SQLite 使わないので 調べたことがありませんでした……。</description></item><item><title>pacman の --overwrite についてよく分かっていない</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/pacman-overwrite/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/pacman-overwrite/</guid><description>pacman の &amp;ndash;overwrite オプションは滅多に使わないですが、パッケージが 壊れてしまったときなどには使うことがあります。
ただ、ワイルドカードがどのように解決されていて、ディレクトリを再帰的に 含めてくれるのか……などは分かっていません。
そういえば、昔は &amp;ndash;force オプションなんかがあったような気がするのですが、 今見たらないようでした。なくなったんですかね？
&amp;ndash;force にしろ &amp;ndash;overwrite にしろ、上書き前にはそれぞれのファイルの状態を 確認しておきたいものです。私だったら、 ArchWiki を参照して paccheck --md5sum --quiet なんかで壊れていそうなファイルの 一覧を得て、それぞれのファイルを確認してから xargs なんかで overwrite するような気がします。
まあ時々再インストールしてあげるのもいいと思いますけどね。</description></item><item><title>Pollyanna が届きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/received-pollyanna/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/received-pollyanna/</guid><description>ほぼ日 MOTHER プロジェクト第1弾の Pollyanna が届きました。
おまけのシールが付いていたりするのは知っていましたが、 今後のグッズの発売予定が書いてあり楽しみになりました。</description></item><item><title>ゆうパックが即日配送に対応していることを知りました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/you-pack-same-day-delivery/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/you-pack-same-day-delivery/</guid><description>ゆうパックって、エリア内限定ですが午前中に出された荷物を 17-21時に配送するサービスがあったんですね。</description></item><item><title>Thinkpad を買いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-thinkpad/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-thinkpad/</guid><description>仕事で使っている PC に不満が出てきたので、Lenovo の Thinkpad を買いました。
購入時は FullHD パネルの在庫の問題か、納期が1ヶ月程度かかると表示されて いたのですが、思ったより早く今日発送されたようでした。
届くのが楽しみです。</description></item><item><title>0sim を nuromobile に移行する手続きをしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/migrate-0sim-to-nuromobile/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/migrate-0sim-to-nuromobile/</guid><description>0sim のサービスが終了して、nuromobile に移行するという メールがきていたので、移行の手続きを済ませました。
ドコモ回線だと 200MB で月300円なので、当面の寝かせる回線としては (0円には劣りますが) 安い方ではないかなと思います。
わざわざ nuromobile を契約する必要があるのかと考えれば 微妙と言わざるを得ないですが……。</description></item><item><title>RasPi 上で hostapd がうまく動きません</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/hostapd-failure-on-rpi/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/hostapd-failure-on-rpi/</guid><description>SSID が見えたり見えなくなったり、見えたとしても 接続に失敗したり……hostapd がうまく動いてくれません。
nl80211: set_key failed; err=-22 Invalid argument) などと いったエラーが出たり、hostapd 側から切断されているようです。
WiFi 周りって考えること多そうで難しいですね……。</description></item><item><title>Netgear GS308 を買いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-netgear-gs308v3/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-netgear-gs308v3/</guid><description>有線 LAN 機器が増えてきたのでアンマネージスイッチを買ってみました。
……普通にスイッチングハブですよね……という感じです。設定項目もないので。
金属筐体で安心感がありますが、唯一の欠点というか、電源ポートが LAN 側に あれば裏側のスペース確保が楽でいいのにな……と思いました。</description></item><item><title>Abusix からメールが来ていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/got-an-email-from-abusix/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/got-an-email-from-abusix/</guid><description>独自ドメインのメールの postmaster 宛てに abusix からメールが届いていました。
ただ、存在しないメールアドレスなんですよね……。 Have I Been Pwned で確認してみても登録されていませんでした。 ただ、迷惑メールが届いているアドレスは存在するので、どこから漏れているのかは 気になっています……。</description></item><item><title>DHL で個人輸入の税金を支払いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/pay-tax-via-dhl/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/pay-tax-via-dhl/</guid><description>海外の通販サイトから商品を購入すると、輸入の際に消費税などの支払いが必要になりますが、 DHL での配送の場合は DHL で税金の支払い代行サービスを利用することができます。
まず、DHL の追跡番号で状態を確認すると、支払いが必要である旨が表示されます。 チャットでの問い合わせなどで追跡番号を伝え、クレジットカードで支払いたいと 伝えるとメールでリンクが送られてきます。 そのサイトでクレジットカード決済をすると、あとは通常と同じように DHL で配送されます。
チャットで問い合わせする際も親切に教えていただきとてもよかったです。 手数料がある程度必要ですが、かなり手軽に購入・支払いができるので 便利に利用させていただこうと思っています。</description></item><item><title>Kusakata.bot2 を倒せない</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/can-not-beat-bot/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/can-not-beat-bot/</guid><description>ArchWiki-jp 上初？なんですかね？連続編集回数が100回になっていました。 bot の、ですが。
今まで bot の連続記録が途切れていた原因って何なんでしょうか。 このままでは永遠に bot に勝てないですね……。 (勝つ必要もないのですが。)
タイトルは語感がいいのでユーザー名をそのまま使ってしまいました…… 問題があれば修正します。</description></item><item><title>ソニー銀行のキャッシュカードを再発行しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/reissue-sony-bank-cash-card/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/reissue-sony-bank-cash-card/</guid><description>名義変更をしたのでソニー銀行のキャッシュカードを再発行しました。
プレステデザインにしてみました。思ったよりかわいかったです。</description></item><item><title>イトーヨカドーのクレジット決済手順</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/itoyokado-credit-payment/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/itoyokado-credit-payment/</guid><description>ヨーカドーでは、商品登録が終わった直後に CAT に「クレジット」と 表示されて、クレジットカードを受け付ける状態になっていますが、 この状態では決済できないようでした。
他の方の決済を見ていると、セブンアンドアイ系列のカードを差し込んで いる方を見ることがあるので、ポイント関連の処理なんでしょうか。
商品登録後は客側からの操作だけで完結すれば楽なのになあ……。なんて 思っています。</description></item><item><title>Google Pay の QUICPay 番号を聞かれました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/google-pay-quicpay-number/</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/google-pay-quicpay-number/</guid><description>QUICPay で購入後、商品の交換をお願いしたところ、QUICPay の番号を 求められました。
GooglePay アプリからは下4桁しか表示されておらず、レシートも同じ 表記だったため、一旦保留にしていただき調査したのですが、 QUICPay の番号自体あまり普段から認識することもないため、 確認する方法を見つけることができませんでした。
POS システムによって返品の方法は違うと思いますが、 QUICPay の番号を求められたのは初めてだったので驚きました。
最終的にはタッチで返品→再決済できたので事無きを得ました。</description></item><item><title>やさしいタオルを追加で購入しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-extra-yasashii-towel/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/bought-extra-yasashii-towel/</guid><description>また買っちゃいました。
今治タオルが割と最高峰？だと思っていたのですが、 全然そんなことはなかったですね。
売り切れになっている柄は入荷しないんでしょうか？ 無地が欲しくなってきました。</description></item><item><title>GBA に使う音量調整付きヘッドホン延長ケーブルを買いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-06/gba-external-volume/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-06/gba-external-volume/</guid><description>前にスライド式のものを買って使いにくいと感じていたので、 多回転っぽいものを買いました。
無音にもできますし、操作性もよく満足しています。
GBA のノイズも、GBA 側で音量を大きくしてあげると比較的軽減されるので ゲームが捗りそうです。</description></item><item><title>タオルがきれいになりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/cleaned-up-towel/</link><pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/cleaned-up-towel/</guid><description>やっぱりちゃんとすすいだのがよかったんですかね。 お日さまの香りっぽいなんかになりました。 ……いや、面倒なので漂白するというのも一つの手だと思いました。</description></item><item><title>タオルのにおいを熱湯で取ってみます</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/clean-up-towel/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/clean-up-towel/</guid><description>大家族でもない限り (？)、洗濯を毎日するほど洗濯物は 貯まらないと思いますが、私も洗濯機は毎日回していないので、 タオルから嫌なにおいがしてくることがあります。
基本的に使ったタオルは広げてかけておくようにして、 濡れた状態で細菌が繁殖するのは防ぐようにしているのですが、 部屋干しや乾燥機だとそれでも完全に防ぎきれていません。
漂白剤を使う方法もありますが、ひとまず熱湯で漬け置きすると ある程度においが取れるというのを聞いたことがあるので、 時々そうしているのですが、その後もすぐににおうように なってきていました。
ほぼ日刊イトイ新聞 - 「やさしくないタオル」のつくりかた。 で 「タオルの繊維のなかに、洗剤、汚れ、水分が残されたままの状態」 になっている、という記述があったので、今回は熱湯に 漬け置きした後、(残った汚れを落とすように)よくすすいでから もう一度熱湯に漬け置きしてみました。
その後、洗濯が終わって乾燥中ですが、果たしてにおいは 取れているのでしょうか…… これで取れていなかったら漂白剤のお世話になろうと 思います。</description></item><item><title>RPi4 8GB 版が出ていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/rpi-4-8gb/</link><pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/rpi-4-8gb/</guid><description>ksy で見る限り1GB 版はまだ未定のようですが、公式サイトからは表記が消えていたので、 1GB をやめて 8GB にしたのかもしれません。
8GB……もうメモリ容量だけで見ると通常の PC と同じようなレベルになってきましたね。 ますます RPi の活躍できるフィールドが広がりそうで嬉しいのと、 arm64v8 の利用がもっと広まってほしいなあという気持ちがあります。
GitLab なんかも arm 上に構築するの少し面倒なので……。</description></item><item><title>HTML5 の fragment identifier について調べました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/html5-fragment-identifier/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/html5-fragment-identifier/</guid><description>調べると言っても StackOverFlow に 全て書いてあったのですが……
全ての要素の id 属性にマッチするものがないかを調べて、次に name 属性を 見るようです。span である必要もないようですね。</description></item><item><title>MediaWiki の重複するセクション名</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/mediawiki-duplicate-section-name/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/mediawiki-duplicate-section-name/</guid><description>MediaWiki の重複するセクション名に自動で _2 などの suffix が付くことを知りました。
ページのソースを見て思ったのですが、セクションの アンカーには span の id 属性が使われているんですかね？ ずっと a の name 属性しか使えないと思っていたので、 知識のアップデートが必要そうでした。</description></item><item><title>GBA のノイズが気になる</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/gba-noise/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/gba-noise/</guid><description>スピーカーでプレイしていると気にならなかったのですが、 イヤホンでプレイすると低音のノイズが気になりますね……。
音量を上げてもノイズ自体の音量レベルは上がらないようなので、 音量を下げるような延長ケーブルを使えばノイズは一応改善しそう ですね。
既存の音量ボリュームを生かしながら音質の改善ができれば いいのですが……。</description></item><item><title>やさしいタオルを洗濯乾燥機で洗ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/washed-yasashii-towel/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/washed-yasashii-towel/</guid><description>書いてあった通り端が少し縮んでしまっていました。
手元にアイロンがないので (ヘアアイロンはありますが……)、 手で伸ばしてみたところ、なんかいい感じになったように 思います。
買い足すにはもう少し耐久性を見たいなとは思いますが、 十分信頼できそうな感じはあります。 ただ、白無地があればなあ……と思っています。</description></item><item><title>GBA 用の IPS 液晶が売っているようです</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/gba-ips-display/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/gba-ips-display/</guid><description>秋葉原で GBA 用の IPS 液晶の販売を開始したというツイートを 見かけました。
ただ、これ前から AliExpress なんかで売っているもののよう なんですよね…… 気が向いたら GBA の中古を部品取りに調達 + AliExpress で IPS 液晶と対応ハウジングを買おうかなと悩んでいます……。</description></item><item><title>やさしいタオルが届いたので使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/used-yasashii-towel/</link><pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/used-yasashii-towel/</guid><description>すごい吸水力があってびっくりしました。
私は割と何にでも洗濯乾燥機を使っているので、このタオルが どのくらい持ってくれるのかが気になるところですが……。
ほぼ日刊イトイ新聞 - 「やさしくないタオル」のつくりかた。 を読んでみると、乾燥機は割と優秀なようです。 ただ、天日干しよりは縮むようで……。難しいところです。</description></item><item><title>ほぼ日 MOTHER プロジェクト</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/hobonichi-mother-project/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/hobonichi-mother-project/</guid><description>公式トリビュートコミックとバッグ、買わなきゃ(使命感)</description></item><item><title>やさしいタオルを買ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/yasashii-towel/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/yasashii-towel/</guid><description>MOTHER2 をプレイしてみて、実はすっかり糸井ワールドに魅せられているのですが、 ほぼ日ストアで売っているタオルが気になったので買ってみました。
片面がガーゼになっているタオルは使ったことがないので、届くのが楽しみです。</description></item><item><title>MOTHER 1+2 が届きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/mother-1-2/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/mother-1-2/</guid><description>届いたので早速プレイしました。
10年以上前のゲームが当時の実機でそのままプレイできるのは すごいなあ……と思いました。
あとは……始めたばかりなので……</description></item><item><title>ArchWiki-jp の編集回数が500回を超えていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/500-edits/</link><pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/500-edits/</guid><description>統計 - ArchWiki に表示されていますが、ArchWiki-jp の私の編集回数が500回を超えていました。 過去の統計 を見ると、2019年9月の時点で5回以上編集しているユーザーの一覧がありますが、 500回以上編集されている方はいなかったようなので、最新のリストで管理人さんと ボットを除けば1位になったようです。
……とはいえ、編集数の多くなるような編集方法をしているので、総編集回数だけで 何位だという議論は無駄ではありますが。 また、外部 wiki に移行する前の編集の統計も出ていないようなので、それも 入れると変わってきそうですね。
この調子で総編集回数を倍増させて(1000回)、ArchWiki の歴史に名を残して(？) いきたいですね。あと連続編集記録も100日くらいまでは続けたいと思っています。</description></item><item><title>ArchWiki の新しいページの訳出に慣れてきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/archwiki-translating-new-page/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/archwiki-translating-new-page/</guid><description>ページ名とか見出しとかはだいたい複数形になっているみたいなイメージが できてきました。
あと熟語帳で見たことのある単語が出てくると「こんな所で使うんだ〜」と なりますね。 quite a few とか。</description></item><item><title>Chromium の GUI を docker コンテナ内で実行する</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/run-chromium-in-docker/</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/run-chromium-in-docker/</guid><description>前は Firefox でやりましたが、Chromium はサンドボックスがあったりして 前のままのコマンドでは動いていませんでした。
以下のコマンドで動きました。といっても --privileged を追加しただけですが。 --privileged なしでも --no-sandbox をつけて chromium を起動すれば 一応ウィンドウまでは出るのですが、グラフィックドライバがうまく 読み込まれずに真っ白のままになってしまうという問題がありました。
sudo docker run --rm \ -v /tmp/.X11-unix \ -v ~/.Xauthority:/home/user/.Xauthority \ -e DISPLAY \ -e XAUTHORITY=/home/user/.Xauthority \ --net host \ --privileged \ archlinux \ sh -c 'pacman -Syu --noconfirm chromium; useradd user; chown user:user /home/user; su user chromium' もう少し --cap-add などで Capability を絞ってもいけそうですね。
Firefox に比べれば安定しているかなという印象ですが、やはり YouTube などを FullHD で視聴しようとするとタブがクラッシュしてしまうので、 実用には厳しいかなという印象でした。
わざわざ Docker 内で起動しなくても、psd なんかで毎回リセットするように してあげればほぼ同じことが実現できるんですけどね……。</description></item><item><title>MOTHER 1+2 を買いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/bought-mother-1-2/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/bought-mother-1-2/</guid><description>よく名前の挙がるゲームである MOTHER ですが、今まで遊んだことが なかったため、いい機会だと思い購入してみました。
バーチャルコンソールでない GBA 用ソフトはもう新品では入手できない ため (新古品はありますが高価です) 、状態のよさそうな中古を探して 購入しました。
GBA 本体の用意は一応できたので、ソフトが届くのが楽しみです。</description></item><item><title>Deno</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/deno-land/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/deno-land/</guid><description>Node.js の置き換えを目指した Deno というプロジェクトの v1.0 がリリースされていたようです。
Node.js 向けのライブラリの互換性は完全にないのでしょうか。shim なんかを書いて使えるのであれば Express や Nest.js なんかを使えるようにしてみたいですね。</description></item><item><title>MOTHER をやったことがない</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/mother/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/mother/</guid><description>私はゲームの MOTHER はプレイしたことがないんですよね、 今から買ってやるとしたら何がいいんでしょうか？ GBA？ Wii U？</description></item><item><title>ノート PC が突然勝手に起動するようになっていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/reboot-spontaneously/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/reboot-spontaneously/</guid><description>しばらく放置していたノート PC を久しぶりに起動しようとしたのですが、 電源ボタンを押しても反応がありませんでした。 放置していた期間中ずっと AC アダプタを接続していたので、電源関係の 問題ではないと思ったのですが、一旦電源を外してみたり、再度接続して 充電が完了するまで待ったりしてみても起動しませんでした。
諦めてしばらく電源ボタンを連打していたら、いつのまにか起動していました。 Arch のアップデートなどを済ませて電源を落としたら、今度はなぜか勝手に 起動するようになってしまいました。 しかも、しばらく放置していると勝手に電源が落ちているようでした。 WoL などは設定していないはずで、マジックパケットなども飛んでいないはずですが、 念のため LAN ケーブルを外して電源だけ接続している状態にしても改善しません でした。
AC アダプタを外したり、閉じた状態にしておけば……と試してみても、一向に 改善しませんでした。 これは電池が空になるまで続くのか……と思っていたのですが、電源を入れたり 切ったりしてみているうちに起きなくなっていました。
今のところどちらの問題も再発はしていないようですが、一体原因は何で、 PC が壊れているのかどうかも分かりませんが、もうしばらく様子を見ようと 思います……。 電源 (少なくとも LED) が消えた状態から勝手に起動するようなロジックが 存在するのでしょうか、それとも外来ノイズか何かでしょうか。</description></item><item><title>リプトンブランドの販売権がキーコーヒーにあることを知りました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/lipton-keycoffee/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/lipton-keycoffee/</guid><description>私はコーヒーより紅茶を飲むことが多く、リプトンのイエローラベルなどを 買うことがあるのですが、値札を見るとキーコーヒーと書いてあったので 調べてみました。
キーコーヒーのニュース を見ると、ユニリーバと販売総代理店契約を結んだと書かれています。
パッケージにも製造者であるユニリーバの記載しかないため、今まで気付き ませんでした。
よく考えるとキーコーヒーのコーヒー(？)もあまり飲んだことがないので、 機会があれば飲んでみたいと思いました。</description></item><item><title>マルチアーキテクチャ対応の Docker イメージを作りたい</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/want-to-build-multi-arch-docker-image/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/want-to-build-multi-arch-docker-image/</guid><description>multi-arch 対応の docker image をビルドしたいと思ったのですが、 docker manifest サブコマンドや docker buildx サブコマンドはまだ experimental な上、manifest を作るには insecure ではない registry が必要そうで、事前のセットアップが少し大変そうで一旦諦めました。
LAN 内に insecure な registry を立てて遊ぼうと思っていたのですが、 目論見が外れた形ですね。きちんと外部に公開して Let&amp;rsquo;s encrypt で SSL 対応して、認証も……とやってもいいのですが、今は少し元気が足りず……</description></item><item><title>veto という英単語</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/veto/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/veto/</guid><description>選挙の拒否権といった意味で、ラテン語由来っぽいですね。
言語の学習もエンドレスですね……</description></item><item><title>Bugwranglers の訳し方</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/translation-of-bugwranglers/</link><pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/translation-of-bugwranglers/</guid><description>バグハンター……バグ管理人……バグレポーター……バグレポートのモデレータ……バグのカウボーイ……
バグラングラー(雑)
Trusted User も訳されていない気がするのでそのままでいいかとなりました。</description></item><item><title>env -C を知りました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/env-c/</link><pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/env-c/</guid><description>env コマンドってあまり使わないんですが (env 省略して LANG=C ls のようにしがち)、 env コマンドの help を見てみたら -C というオプションを見つけました。
C は chdir の C ですね。(cd /hoge; foo) みたいなことができるということですね。
ちょっと便利だし使いたいとは思いますが、使ってるの見たことないので知名度は かなり低いんじゃないかな……と思っています。</description></item><item><title>losetup の -P オプションがうまく働いてくれない</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/losetup-p-did-not-work-properly/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/losetup-p-did-not-work-properly/</guid><description>前に losetup -fP が便利という記事を書いたような気がするのですが、 今日試したらなぜかうまく動いてくれませんでした。
losetup のデバッグをするのもいいんですが、とりあえず動いてくれないと いちいち offset を計算しないといけなくて面倒だったので、手動で partprobe を呼び出して対応しました。
# losetup -f image.img # partprobe /dev/loop1 という感じでなんとかなってくれると思います。多分。</description></item><item><title>GPG キーをきちんと管理したい</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/want-to-manage-gpg-key-properly/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/want-to-manage-gpg-key-properly/</guid><description>やっと無線アダプタのない RPi を購入したのでそろそろきちんと管理したいのですが、 gpg キーのパスフレーズや暗号化、バックアップのあたりでうまい方法がないか 探しています。
仕事で使うものや OSS で使うものなど、メールアドレスベースで gpg キーを分けて いると、定期的な expiration の更新だけで手間がかかって仕方ありません。 パスフレーズを保存しておくにも gpg にパスフレーズを渡すのが大変そうですし、 パスフレーズなしにしてきちんと暗号化して保管するのも、万一漏れてしまったときの ことを考えてしまって安心できません。
まあ、更新しやすい脆弱なパスフレーズを使っていたら、万一漏れてしまったら ほとんど一緒だと思うんですが……。
あとは RPi でも /boot を除いたディスク暗号化をしておきたいなと思いました。 initramfs あたりの仕組みは x86_64 と同じなようなので、適宜 encrypt フックなどを 使えば達成できそうかなと思っています。</description></item><item><title>通信機器の AC アダプタが多すぎる</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/too-many-ac-adaptors/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/too-many-ac-adaptors/</guid><description>ONU、TA、スイッチ、外付け HDD ケース……
どれも 12V なのに専用の AC アダプタがついていて、電源タップも 悲惨なことになってきました。
ATX 電源と DC ジャックで電源をまとめようかなと思い始めました。 12V のスイッチング電源を考えていたのですが、ATX 電源の方が安価なのと、 5V が出ているので USB の充電も一緒にまかなえるので、ATX 電源の 方がよさそうに思いました。
……と思っていたら、玄人思考なんかの ATX 電源が品薄になっているよう でした。6月になったら入るかな。</description></item><item><title>bluez-alsa-git の最新バージョンが動かない気がします</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/bluez-alsa-git-wont-work/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/bluez-alsa-git-wont-work/</guid><description>pulseaudio を避けて bluez-alsa を使っているのですが、bluez-alsa-git の 最新の 2.1.0.r43.g49ad348-1-x86_64 で bluealsa-aplay の再生に問題が あるような気がしました。
とりあえず 2.0.0.r0 に落としたら動いている気がするのでこれで使おうと 思います。 問題切り分けしたいですが、再起動しないと反映しないようなので少し 面倒だなと思いました。</description></item><item><title>ArchWiki の ArchWiki 名前空間の同期が終わった気がします</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/finished-sync-archwiki-namespace/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/finished-sync-archwiki-namespace/</guid><description>ArchWiki 名前空間の同期が終わった気がします。翻訳の速度が上がってきたのか、 より慣れてきたのか、今までの (ヘルプ名前空間といった) ページよりも早く 完了できたような気がしています。
いや、単に同期する量が少なかっただけかもしれませんが。</description></item><item><title>circa</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/circa/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/circa/</guid><description>&amp;ldquo;circa&amp;rdquo; って &amp;ldquo;about&amp;rdquo; みたいな意味の単語なんですね、初めて見ました。</description></item><item><title>国から配布されている布マスクが届きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-05/received-nonmedial-mask/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-05/received-nonmedial-mask/</guid><description>いつ届くんだろうと思っていたら今日届いていました。</description></item><item><title>RPi の MAC アドレスを電源を入れないで確認したい</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/want-to-get-rpi-mac-address-from-without-power/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/want-to-get-rpi-mac-address-from-without-power/</guid><description>RPi がたくさんあると MAC アドレスや固体の識別できる情報を 電源がなくても(ハードウェアの見た目のみで)確認したくなったり すると思うのですが、調べてみた限りではそのような方法は なさそうでした……。
MAC アドレスは EEPROM ではなく CPU のシリアル No を使っている ようなので、CPU の情報が基板に記載されていれば…… その可能性は低そうですね。
唯一？あるのは製造番号らしき16桁の番号の入ったデータマトリクスと、 いくつかの日付のような印字のみでしょうか。 このあたりの情報も出ていれば嬉しいのですが、まあ誰も データマトリクスなんて読まないですよね……。</description></item><item><title>pangox-compat の削除が提案されています</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/dropping-pangox-compat/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/dropping-pangox-compat/</guid><description>pangox-compat、ビルドが失敗するので bug 報告が立っていたのですが、 ついにメーリングリストで削除が提案されていました。
公式リポジトリのパッケージが削除されたら AUR の lib32 の方も deletion request 出してよさそうですかね。</description></item><item><title>CVE の件数</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/cve-amount/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/cve-amount/</guid><description>CVE の件数って、日によって全然違うんですね。 半日で5件くらいしかないときもあれば、100件くらい出ているときもある感じでしょうか。
まあ、報告があった(？)ものをそのまま出していればむらになってしまうのは 仕方なさそうですね……。 ただ、ざっとは目を通すようにしているので、どのくらい時間がかかりそうか 事前に見積っておくのが難しいなと感じました。</description></item><item><title>住民票のレシート</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/receipt-of-copying-certificate-of-residence/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/receipt-of-copying-certificate-of-residence/</guid><description>最近は便利なものでコンビニのマルチコピー機で取得することができます。 ファミリーマートで住民票を取得したのですが、レシートが B5 の普通紙で 出てきてびっくりしました。
コピー機自体もレシート用紙への印字機能を持っていたはずですが、 地方公共団体情報システム機構の都合でもあるのでしょうか。</description></item><item><title>ArchWiki の Help 名前空間のページの同期が完了しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/completed-sync-archwiki-help-pages/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/completed-sync-archwiki-help-pages/</guid><description>もう1ヶ月とちょっと日本語版 ArchWiki の翻訳更新作業を続けているのですが、 ついに(？) Help 名前空間のページだけですが全て最新に更新することができました。
日本語版の更新を続けている方は本当に少ないようで、(編集を細かく分割しているとはいえ) bot を除いて3番目くらいになるのは悲しいですね……。 (外部 wiki への分割前の編集は追えていないので分からないですが……。)
さて、次は ArchWiki 名前空間に着手しましょうか。本当にエンドレスな作業で エンドレスだなあと思いました。</description></item><item><title>Gridsome のビルドが壊れてしまいました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/broken-gridsome-build/</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/broken-gridsome-build/</guid><description>babel のバージョンでビルドが落ちているだけだと思って放置して いたのですが、バージョン上げてみても落ちていたので壊れて しまった……という感じです。
バージョン下げたりして直そうと思っていますが、gridsome の方を 放置してしまっているのがそもそもの問題ですよね……。</description></item><item><title>名前の変更</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/changed-name/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/changed-name/</guid><description>昨日のポストはとても分かりにくい名前が変わった報告だったのですが、 GitHub の障害でデプロイされていませんでした……。
名前が変わって、まあ名前が変わったのですが、手続きが大変ですね。 ネット銀行はいいんですが、メガバンクの口座は支点に行かないと 手続きができないようですね。社会情勢も鑑みてネットで済ませられれば よいのですが……。
仕事は旧姓で続けようかなと思っています。OSS 活動は実名に切り変えても いいかなーと思ってはいますが、Arch Linux JP コミュニティだと ハンドルネームの方が多いかなという感じなので悩んでいます。 海外だとどうなんでしょう……ハンドルネームの方が多いように思っていますが、 実名を少しもじっただけだったりしたら分からないので……。</description></item><item><title>職権修正</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/amend-ex-oficio/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/amend-ex-oficio/</guid><description>私の語感が気に入っている言葉に「職権修正」というのがあります。
あまり聞き慣れない言葉だと思いますが、住民票などに記載されたり する場合がありますね。 ご両親の住民票に載っている方もいるかもしれませんね。
私は役所に勤めているわけではないのであまり詳しくありませんが、 住民票などの記載事項変更には「届出」・「通知」・そして「職権」の 3種類があるようで、届出は文字通り本人などからの届出、通知は 他の自治体から(あるいは裁判の結果？)の通知、そしてそれ以外の場合は 職権ということみたいです。 住民票以外にもマイナンバーカードなどにも記載されることがあるようで、 今まで知り合いのカードに記載されているのを見たことがあって、 羨しく思っていました。
「職権修正」ってかっこいいと思いませんか？届出でも通知でもなく、 普段触れることのできない住民票というシステムを、(見かけは)いとも 簡単に「職権」により修正してしまうなんて……。
さて、その「職権修正」ですが、今日私の住民票とマイナンバーカードにも 記載されました。新しい住民票の記載内容と共に、これからも頑張って いこうと思います。
あまり関係はないですが、 ex officio という英単語を初めて知りました。 見ただけで分かるようにラテン語由来ですね。</description></item><item><title>dhcpcd が core から extra に移動されるかもしれません</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/move-dhcpcd-from-core/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/move-dhcpcd-from-core/</guid><description>Arch Linux のメーリングリストを眺めていたら、dhcpcd の移動に関する話題が 上がっていました。
どうやら dhcpcd の利用率が低下していて、core には他の代替がある (networkd と書かれていましたが、dhclient のことですかね？) ため、extra リポジトリに移動することを提案していました。
pacman を使う上では core も extra も変わりはないのですが、 他のクライアントも使ってみてもいいかもしれませんね。</description></item><item><title>ひかり電話の SIP がちゃんと認証してそうでした</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/ip-phone-for-optical-internet/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/ip-phone-for-optical-internet/</guid><description>契約しているひかり電話の SIP リクエストをキャプチャしてみたら ちゃんと(？) Digest 認証してありました。
適当に自前 SIP サーバー建てて遊べるかなと思ったのですが、 ファームウェア解析とかしてパスワード探さないと厳しそうですね……。</description></item><item><title>systemd-cryptsetup</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/systemd-cryptsetup/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/systemd-cryptsetup/</guid><description>ArchLinuxARM で初期インストール時から cryptsetup が入っていて 気になっていたのですが、systemd が cryptsetup に依存していることを 知りました。
ArchLinuxARM を使ってエアギャップコンピュータ上で GPG 鍵を管理しようと 思っていたときに、バックアップ時に LUKS を使おうと思ったら既に cryptsetup が入っていて驚きました。 メインのマシン上ではフルディスク暗号化を使用しているため明示的に インストールしていたので気付きませんでした。
systemd-cryptsetup、起動時に crypttab に記載されている暗号化 パーティションをマウントするために使われているようですね。 私は initramfs 内でマウントしているのでしばらく使うことはなさそうですが……。</description></item><item><title>Gatsby のビルドが落ちていたので直しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/failing-gatsby-build-on-node-13-13/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/failing-gatsby-build-on-node-13-13/</guid><description>node 13.13 に上がってから babel を 7.9.0 に上げるまでの間、ビルドが 落ちていました。
node 13.12 に下げてみた後、babel を 7.9.0`に上げて解決しました。
babel/babel #11427 あたりを参考にしました。
……gridsome も落ちてるんですが、そもそも放置しているので何とかしたい……</description></item><item><title>syui さんのスポンサーになってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/sponsor-of-syui/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/sponsor-of-syui/</guid><description>GitHub Sponsors でスポンサーを募集していたので、試しに(？)スポンサーに なってみました。
私は技術系ばっかりでデザイン系はあまり触れてこなかったので、デザインとか できる人はすごいなと思います。 関係ないですが、過去のイラストアイコンはほとんどフォロワーさんに描いて もらっていたくらいです。
……普通ならここで syui さんのことを賞賛して褒め称える文章があと10000字くらい 続くのでしょうが、残念ながらそうではないようです。 今まで通り毎日芝を生やすのと同じように、気が変わるまでスポンサー続けると思います。</description></item><item><title>Git に git サブコマンドを追加してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/git-git-subcommand/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/git-git-subcommand/</guid><description>私はよくシェルに git と打ち込んでから行う操作を考えて、その後再度 git と入力してしまう 傾向にあります。git git status を実行するのはほぼ癖といってもいいかもしれません。
よく知られているように、git にはカスタマイズ可能なサブコマンド機能があります。 任意の実行ファイルを起動することも可能です。そこで、この機能を使って git git に 対処してみようと思いました。
git config --global alias.git '!git' 上記を実行すると、git の後に git が何回続いても正常に(？)コマンドが実行されるようになります。 これで git git status などと打ってエラーになることもなくなりました。
さて、git git でエラーになる問題は解決したわけですが、新たに別の問題が出てきました。 それは……このページが git git になっていることです……。
不思議なことにこの alias を設定した後は git git と打つことも減ったような気がします。 せっかく設定したんですけどね……。</description></item><item><title>ArchLinux のユーザーは若い人が多いように思いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/young-archlinux-users/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/young-archlinux-users/</guid><description>なんか若い人が多いような気がしました。それだけです。 自分も人のことは言えないのですが……。</description></item><item><title>ブログを毎日書くのがつらくなってきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/time-shortage-to-writing-blog/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/time-shortage-to-writing-blog/</guid><description>いつもツイートくらいの長さなんだからシュッと書けば終わりなのに なんかうまく1日の中で時間を見つけて書くのは難しいですね。
ArchWiki はとりあえず続いているのでよしとしたいところですが…… とはいえ100ポスト超えているので続けるつもりではいます。</description></item><item><title>Kyash の新しいカードで EMV 決済をしてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/kyash-emv/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/kyash-emv/</guid><description>イトーヨーカドーで EMV 決済をしました。普通に PIN なしで EMV 決済できました。
……本当はコンタクトレスで決済したかったんですが、イトーヨーカドーってまだ 対応していないんですね……。セブンイレブンも6月までは対応していないようですし、 イトーヨーカドーはそれと同じかそれよりも後でしょうか……。
まあ、QUICPay 使えばいい話なんですけどね。</description></item><item><title>Network Security Services</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/network-security-service/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/network-security-service/</guid><description>nss のパッケージングに問題があった(soname ファイルが不足していた)ため ニュースが出ていたので少しだけ調べてみました。
ArchLinux に nss というパッケージが入っていることは知っていたのですが、 これ Molliza のプロジェクトだったんですね……。
chromium, firefox, electron, JDK, libreoffice あたりが依存しているので デスクトップユーザーだと入っている確率が高そうですね。</description></item><item><title>新しい Kyash Card を GooglePay に登録してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/use-new-kyash-card-with-google-pay/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/use-new-kyash-card-with-google-pay/</guid><description>昨日は警告が出たので登録できないのかと思ったのですが、やってみたら 登録できました。
最近は 6gram を使っているので決済はまだ試していませんが、 せっかくなので Visa タッチ決済(payWave だったやつ)も試したいですね。</description></item><item><title>新しい Kyash Card が届きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/new-kyash-card/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/new-kyash-card/</guid><description>申し込んでいた新しい Kyash Card が届きました。
カード表面と IC / ストライプの向きが今までのカードと逆なのは、 実験的要素なんでしょうか？ 正直プリペイドカードでカード表面はあまり重要ではないと 思っていて、ゴールドカード以上だったら分かるのですが、 もしかしたら三井住友系で将来導入を検討しているのでしょうか。
それと、Google Pay 対応はいつになるんでしょうか…… (確認はしていないですが、警告が出ていたので……。)</description></item><item><title>Qwiklabs を試してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/try-qwiklabs/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/try-qwiklabs/</guid><description>COVID-19 の応援でしょうか、Google が Qwiklabs などを1ヶ月間無料提供しているようなので 試してみました。
Start your learning journey with Google Cloud today などから無料で開始することができます。
ひとまず、Google Cloud Essentials を試してみました。
Qwiklabs とは直接関係ないですが、GCP の Cloud Shell ってすごいサクサク動くんですね…… ローカルと遜色ないほどな気がしました。 海外の安い VPS などでブラウザ上で VNC するような shell を使っていた時期があったので、 その進化には驚くばかりです。</description></item><item><title>RPi に aarch64 の ArchLinux を入れて RTC モジュールを有効化してみる</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/rtc-module-on-archlinuxarm/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/rtc-module-on-archlinuxarm/</guid><description>ArchLinuxARM では簡単に RTC が有効化できた記憶があったのですが、再度試してみると うまくいかなかったのでいろいろ試してみました。
まず、前に設定して動いている Raspbian の dmesg を見てみます。
[ 5.310771] rtc-ds1307 1-0068: registered as rtc0 このログの通り、 /dev/rtc0 ができていて、時刻同期はスクリプトで行われます。
一方、ArchLinuxARM だと以下のようなログが出ていました。
[ 7.114025] hctosys: unable to open rtc device (rtc0 ... [ 7.258978] i2c-bcm2835 3f805000.i2c: Could not read clock-frequency property /dev/rtc0 も起動時は存在しない状態で、 echo 'ds1307 0x68' | sudo tee /sys/bus/i2c/devices/i2c-1/new_device を実行しないといけません。
https://archlinuxarm.org/forum/viewtopic.php?t=11802 https://gist.github.com/Alex131089/de45d552372a9296abbbbe407ae52180 https://raspberrypi.stackexchange.com/questions/38186/how-to-install-real-time-clock-rtc-on-raspbian 上記のようなサイトをいくつか参照したのですが、ずばりの(？)解決策は なさそうです。よく考えたら Raspbian と違い aarch64 でした……
hctosys は systemd の起動前に(initramfs で)実行されているようです。 initramfs 内の udev に認識させればいけそうでしょうか。</description></item><item><title>RPi 上の ArchLinuxArm での DNSSEC signature expired エラーの対処</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/dnssec-signature-expired-on-rpi/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/dnssec-signature-expired-on-rpi/</guid><description>DNSSEC validation failed エラー に、始めの方は signature expired エラーが出ていたと書いていました。 再インストールの際も同じ問題に遭遇したので対処法をメモしておきます。
といっても、時間を合わせるだけです。RPi には RTC が搭載されていないため、 インターネットに接続するまでは平気で時間が遅れてしまいます。 そのため、signature expired になっているようでした。
時間を合わせるだけなので、いくつか方法はありますが、事前に時刻設定して おいた RTC モジュールを接続する、CLI で手動で時刻を設定する、など でしょうか。
あるいは、DNSSEC 非対応のリゾルバ・DNS サーバーを使うなども可能でしょう。 ArchLinuxARM で割と遭遇しそうな問題なので、フォーラムなど調べてみようと 思いました。</description></item><item><title>GW-US54GXS を ArchLinux で使う</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/use-gw-us54gxs-on-archlinux/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/use-gw-us54gxs-on-archlinux/</guid><description>かなり前に買った WiFi ドングルですが、Linux で使うには追加のファームウェアが必要なのでメモしておきます。
基板に書いてある zd1211 で検索すると、 zd1211-firmware(AUR) があるのでインストールします。
昔は WiFi アダプタを使うのもビルドが必要だったり大変だったような記憶があります(ハードウェア・ディストロの 選択が悪かっただけかもしれませんが)。今は本当にサポートが進んだな……と感じています。</description></item><item><title>Alpine の pacman パッケージに PR を投げました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/contributed-to-alpine-pacman-package/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/contributed-to-alpine-pacman-package/</guid><description>Alpine には pacman というパッケージがあり、名前の通り ArchLinux の パッケージマネージャなのですが、依存関係が不足していたのでパッチを 送りました。
makepkg や pacman-key などは単純な bash スクリプトになっています。 しかし、Alpine の標準状態では sh のみがインストールされていて、 bash は入っていません。また、 pacman パッケージの依存関係にも bash が入っていませんでした。そのため、明示的に bash をインストール しないと、それらのスクリプトが実行できませんでした。
そこで、まず issue を立てて PR (Alpine は GitLab を使っているため 正確には MR) を投げていいかどうか確認しました。 いきなり PR を投げても問題はないと思いますが、一般的にはまず issue を立てて問題を提示してから、PR でそれを解決するような形に するのが適切かと思っています。
issue を作成したところ、いつも pacman パッケージの更新をしている 方に親切に慣習を教えていただき、すぐにマージしていただけました。
Alpine Linux に貢献するのは初めてでしたが、私のコミュニティに対する 第一印象はすごくよかったです。見習いたいところですね。</description></item><item><title>東京都 新型コロナウイルス感染症対策サイトに貢献しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/contributed-to-tokyo-metropolitan-gov-covid19/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/contributed-to-tokyo-metropolitan-gov-covid19/</guid><description>少し前ですが、 tokyo-metropolitan-gov/covid19 に PR を投げて、マージされました。
ブラウザを英語設定にした状態で、初回訪問時にエラーが発生して遷移しなくなるというバグがありました。 issue を探してみると、どうも修正されていたみたいだったのですが、 development ブランチにはその後 その修正がうまくマージされていませんでした。(当該箇所が移動されていました。)
そこで、コードの移動先に当該の変更を反映したものを PR として作成しました。
きちんと master にマージされ、修正されたのを確認しました。 1行だけの変更で、元々私の変更ではありませんが、 OSS の貢献としてこれからも続けていこうと思います。</description></item><item><title>RaspberryPi の乱数生成の速度をテストしてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/rngd-generate-speed/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/rngd-generate-speed/</guid><description>まず、比較のための普段使いのマシンで rngtest -c 1000 &amp;lt; /dev/random を 実行した結果です。rngd のソースにはx86_64 の rdrand を使っています。
rngtest 6.10 Copyright (c) 2004 by Henrique de Moraes Holschuh This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. rngtest: starting FIPS tests... rngtest: bits received from input: 20000032 rngtest: FIPS 140-2 successes: 1000 rngtest: FIPS 140-2 failures: 0 rngtest: FIPS 140-2(2001-10-10) Monobit: 0 rngtest: FIPS 140-2(2001-10-10) Poker: 0 rngtest: FIPS 140-2(2001-10-10) Runs: 0 rngtest: FIPS 140-2(2001-10-10) Long run: 0 rngtest: FIPS 140-2(2001-10-10) Continuous run: 0 rngtest: input channel speed: (min=6.</description></item><item><title>日本語版 ArchWiki の連続編集記録が切れてしまいました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/archwiki-jp-streak/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/archwiki-jp-streak/</guid><description>wiki のデフォルトのタイムゾーンが JST だったので JST 基準かと思っていたら、 サーバーは UTC で、 bot も UTC だったというお話っぽいですね……。
一時期スマートフォンのタイムゾーンを UTC にして生活していた時期があったのですが、 乗り換え検索が壊れてしまって(タイムゾーンが混在する)不便だったので JST に戻して いました。
PC では大抵なんとかなると信じているので、タイムゾーンを UTC に設定しようかな……と 思いました。</description></item><item><title>AlpineLinux の wiki の雰囲気</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/alpine-linux-wiki-spams/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/alpine-linux-wiki-spams/</guid><description>今日から早速 AlpineLinux の wiki にも貢献を始めていますが、ブロックログなどを見ると AlpineLinux の wiki は ArchLinux のものに比べてスパムなどが多い気がしました。
また、手始めに2重リダイレクトの修正を行いましたが、こちらもなんだか放置されているような、 メンテナンスがあまりされていないような印象を受けました。 好きなディストリビューションなだけに残念に思いました。できる範囲で改善していこうと 思っています。</description></item><item><title>AlpineLinux のパッケージのシステムは ArchLinux 由来です！</title><link>https://ny-a.github.io/hugo-blog/posts/2020-04/alpine-packaging-system/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-04/alpine-packaging-system/</guid><description>エイプリルフールネタです、と言いたいところなんですが、どうやら事実のようです……。
AlpineLinux の Wiki によると、 makeinitcpio, makepkg, pacman, PKGBUILD, ABS あたりと非常に 似たシステムになっているようです(もっとも、コンテナで使うときは initramfs は 使いませんが……。)
AlpineLinux はコンテナ上でよく使っているので、これからコミュニティの雰囲気に 慣れていって、少しずつ貢献を始めていこうと思いました。 ただ、 ArchLinux への貢献も続けていきたいので、どう両立させていくかというのは 今後の課題です……。</description></item><item><title>2019年度の終わり</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/end-of-2019-fiscal-year/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/end-of-2019-fiscal-year/</guid><description>早いもので2019年度ももう終わってしまいます。
1月に目標を立ててアウトプットを継続してきましたが、ブログは1日1回相当で3ヶ月続けることができました。 また、 ArchLinux コミュニティへの貢献も継続的に始めることができました。
今までは ArchLinux コミュニティへの貢献に割と時間を割いていて、日常生活に少し支障が出始めていたため、 今後はもう少し時間を減らすなど調整をしながら、継続可能な範囲で貢献を続けていこうと思っています。 今後ともよろしくお願いいたします。</description></item><item><title>分散したロケーションから ping や dig をできるサイト</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/ping-pe/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/ping-pe/</guid><description>ping.pe というサイトがあることを知りました。分散したロケーションから ping や dig ができるようです。
DNS レコードを登録した直後の浸透(ではないけど)の状態を確認したりするのに使えそうです。</description></item><item><title>Pacman の multilib を sed で有効化する</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/uncomment-mirrorlist-by-sed/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/uncomment-mirrorlist-by-sed/</guid><description>タイトルの通りで、 Arch Linux の Docker イメージを AUR のビルド用にしたくて、 multilib を使う必要があったので方法を 探してみました。
まず試したのは patch だったのですが、初期インストール状態に含まれていないため、あまり慣れていない sed を使うことに しました。 調べてみると How to edit next line after pattern using sed? - StackExchange にちょうど ArchLinux 用の(こちらは mirrorlist の方ですが)回答がありました。 multilib レポジトリの有効化用に変更したコマンドは以下の通りです。
sed -e &amp;#39;/\[multilib\]/,/^$/{s/^#//}&amp;#39; /etc/pacman.conf 元のコマンド /\[multilib\]/,/^$/{//!s/^#//} には //! が入っていて、これで1行目を無視しているようなのですが、 これがどう動くのかは勉強不足で分かっていません……
とりあえず sed で思ったよりいろんなことができることが分かりました。</description></item><item><title>Xorg-server のビルドが思ったより楽で驚きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/build-xorg-server/</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/build-xorg-server/</guid><description>xorg-server-dev が orphan &amp;amp;&amp;amp; flagged になっていたので adopt してみたのですが、ビルドが思ったよりすぐ終わってびっくりしました。
Linux kernel とか libreoffice とかが大きすぎるだけなんですかね……。</description></item><item><title>10個の AUR パッケージのメンテナになりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/maintain-10-aur-packages/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/maintain-10-aur-packages/</guid><description>Orphan になっていてアップデートのある AUR パッケージを少しずつ adopt してみていたのですが、その数が10個になりました。 アップストリームの更新が途絶えていたり、既に最新になっているものは adopt しても何も更新することがない(と思う)ので、 今のところそういったパッケージはそのままにしてあります。
また、公式リポジトリに入っている AUR パッケージを掃除する手助けなど、できることからし始めてみています。 Arch Linux コミュニティは日本のローカルコミュニティに比べれば人はたくさんいますが、それでもまだまだ足りないな……という 感じがします。 私の貢献が少しでも手助けになっていれば嬉しいです。</description></item><item><title>6gram のグループとインスタントカードの違い</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/6gram-group/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/6gram-group/</guid><description>6gram をしばらく使っていて、グループとインスタンスカードの違いについても少しずつ分かってきました。
インスタンスカードは QUICPay に紐付けることができず、オンライン決済で使用できるカード番号のみが発行されます。 グループは QUICPay に紐付けることができるのに加えて、メンバーそれぞれにカード番号が発行でき、使用者を追跡できます。
インスタントカードには残高を出し入れすることができます。グループには基本的にチャージすることしかできませんが、 グループから脱退するか解散させることで残高を持ち主の元に戻すことができるようです。
グループを目的別の口座のように使い分けて QUICPay で切り替えながら使用して、必要に応じて残高を移動させることを考えていたので、 気軽に移動できないのは少し残念でした。ただ、余分にチャージしておけば問題ないので、しばらくこのまま使い続けてみようと 思っています。</description></item><item><title>ArchWiki 英語版のフィードを購読し始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/subscribe-archwiki-feed/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/subscribe-archwiki-feed/</guid><description>ArchWiki 英語版の記事を日本語に翻訳する作業を継続しているのですが、英語版の更新の状況を知るためにフィードを購読してみました。
クライアントは今のところ Thunderbird を使っていますが、今後コンソールなどのクライアントに変更しようかなと思っています。
最近だと Folding@home - Arch Wiki の編集が多いように感じますが、 これはずっと更新され続けているわけではなく、最近だけのようですね。 名前だけ見てメディアサーバーみたいなものかと思っていたのですが、記事を読んでみると分散コンピューティングのボランティアの プロジェクトのようですね。名前だけで判断するのはやはりよくないです……。
英語版の更新の傾向などに慣れていって、翻訳に生かすのと同時に、英語版への貢献も始めていけたらなと思っています。</description></item><item><title>ArchWiki の翻訳に慣れてきました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/getting-used-to-translate/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/getting-used-to-translate/</guid><description>ArchWiki の翻訳を毎日するようにしてから Blog の方がおろそかになってしまっていますね……。
でも、いろいろな ArchWiki の記事に目を通したり、知らなかった MediaWiki の機能を発見したりして楽しいです。 毎日 Blog を書く、ということを目標にしていましたが、ArchWiki の翻訳や GitHub への Push で代わりとしようかな……と思い始めています。</description></item><item><title>AmazonLinux2-minimal に docker-compose をインストールしてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/install-docker-compose-on-amazon-linux/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/install-docker-compose-on-amazon-linux/</guid><description>AmazonLinux では、 amazon-linux-extras を使って docker は簡単にインストールすることができますが、 docker-compose のインストールは少しハマる場合がありました。
amazon-linux-extras から epel リポジトリを有効化すると、 yum で docker-compose が利用可能になりますが、 これはアーキテクチャに関わらず現在インストールすることができません(python3.6 系に依存しているため)。
x86_64 pip3 install docker-compose で素直に入ります。特にハマることはないと思います。
aarch64 x86_64 と同じように pip3 でインストールはできますが、依存ライブラリのビルドに必要な依存関係を解決しておく必要があります。 以下のコマンドでインストール可能です。
yum install gcc libffi-devel openssl-devel python3-devel pip3 install docker-compose ビルドが走るので少し時間がかかります。頻繁に使うのであれば AMI を作成しておく方が便利だと思います。
今回は minimal で試しましたが、normal の方では試していないため、また必要になったら試してみようと思います。
といっても、docker-compose を直接インスタンスで使うよりも、最近では ECS や Kubernetes を使うことの方が多そうですね……。</description></item><item><title>6gram の決済速度が遅くなっている気がしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/6gram-quicpay-speed/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/6gram-quicpay-speed/</guid><description>iPhone の方で QUICPay の決済速度が割と遅いという報告を受けたので、手元の Android 端末でも QUICPay の決済の速度を確認してみました。 といっても N=1 なのであまり信頼できる値ではないですが……。
先月に決済を試した感じだと、kyash の高速化後の水準(2秒程度)だったと記憶しているのですが、 今回試した感じだと3秒台かな……という感じで、少し待たされるように感じました。
iPhone だともう少し遅かったとのことです。先月より遅くなっているので、これはユーザー数増加が原因なのかな……と思っています。 Elixir 勉強して 6gram のバックエンド改善ができるようになればいいのですが……。</description></item><item><title>普段使いの決済方法を kyash から 6gram に変更しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/start-using-6gram-regularly/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/start-using-6gram-regularly/</guid><description>6gram は前から登録していたのですが、一時的にクレジットカードチャージを停止していたため、kyash を使い続けていました。 クレジットカードチャージ機能が復活して、しばらく普通に使えていたので、6gram を使っていこうと思いました。
6gramを使ってみました では、グループなどへの残高の移動(アプリ内ではチャージと記載)は100円単位と 書いていましたが、それはスライダーで指定する場合で、手動で入力する場合は1円単位で残高を移動することができました。
また、 Android の方は割と QUICPay 決済が早かったような気がするのですが、iPhone の方はそうでもないかもしれないと 聞きました。もしかしたらユーザー数が増えた影響かもしれないので、速度についてはまた決済を試して比較してみようと思います。</description></item><item><title>Firefox の GUI を docker コンテナ内で起動する</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/run-firefox-in-docker/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/run-firefox-in-docker/</guid><description>Qubes OS はアプリケーションを VM で分離しますが、 Arch Linux 上で Docker コンテナを利用して 同じようなことを試してみました。
例えば、 Firefox を起動するには以下のようにします。
sudo docker run --rm \ -v /tmp/.X11-unix \ -v ~/.Xauthority:/home/user/.Xauthority \ -e DISPLAY \ -e XAUTHORITY=/home/user/.Xauthority \ --net host \ archlinux/base \ sh -c &amp;#39;pacman -Syu --noconfirm firefox; useradd user; chown user:user /home/user; su user firefox&amp;#39; Dockerfile には USER instruction があるので、それを使って Xorg を起動中の UID と一致させればよいはずです。
-v /home/user/.Xauthority だけだとディレクトリとしてマウントされてしまってうまくいきませんでした。 --net host を付けないと、リモートホストからの X 接続と認識されるため、 xhost などが必要になると思います。</description></item><item><title>Arch Linux のメーリングリストを購読し始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/subscribe-arch-mailing-lists/</link><pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/subscribe-arch-mailing-lists/</guid><description>今まで Arch Linux は使っていましたが、コミュニティにはずっと触れておらず、 ArchWiki を読むくらいでした。
最近になってやっと ArchWiki の編集をしたり、 AUR のパッケージのメンテナになったりしていますが、 まだまだコミュニティに参加できているとは言い難い気がします。 そこで、ひとまずコミュニティの雰囲気に慣れようと思い、 Arch Linux のメーリングリストをほぼ全て購読しました。
AUR Request などはかなり Archive が大きく、1日に何十通もメールが来るのかとドキドキしていましたが、 全てのメールにさっと目を通すくらいはできる量だったので安心しました。 フォーラムの方が投稿が多いくらいだと思いました。
フォーラムの方も、最近の更新をいくつかかいつまんで目を通してみています。が、あまり手助けできそうな話題は ないのが現状です……。ひとまず、英文の理解の速度の向上なども含めて慣れていこうと思いました。</description></item><item><title>モバイルPASMOの提供が開始されました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/mobile-pasmo/</link><pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/mobile-pasmo/</guid><description>10年前くらいから希望があったような気がしますが、ようやくモバイル PASMO の提供が開始されたようです。 当面は Android のみのようですね。
対応機種は、おサイフケータイ対応で Android 6.0 以降プリインストールの機種のようです。 また、 Xperia 1/5/8、 Android One S6、 Pixel 4/4 XL については、モバイル Suica との共存が可能なようです。
共存したときの使い勝手とか気になるので、 Pixel 4 でも買ってみようかな……と思っています。</description></item><item><title>nekoko.oneをHTTPSに対応させました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/https-nekoko-one/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/https-nekoko-one/</guid><description>といっても GitHub Pages なのでチェックボックス1つ入れるだけなんですが……。
GitHub Pages での独自ドメインの HTTPS 対応は初めてだったので(本当に簡単ですが)一応メモしておきます。
CNAME ファイルを作成して、使用する独自ドメインを指定する(Settings からでも可能) Managing a custom domain for your GitHub Pages site に従って DNS レコードの設定をする
今回は Apex ドメインなので A レコードを設定しました。 最大48時間待つ(6時間くらいでできていた気がしますが。) Enforce HTTPS にチェックを入れたり、https でアクセスしてみる という感じです。 GitHub 様々ですね。
というわけで割と(？)セキュアな https://nekoko.one/ ができました。</description></item><item><title>ネココワン！</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/nekoko-one/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/nekoko-one/</guid><description>nekoko.one を取得しました。
nyan-cat を表示できるようにしておきました。
DNSSEC は有効化済みで、HTTPS は GitHub の証明書発行待ちです。
ネココワン！</description></item><item><title>久しぶりにArchLinuxのインストールをしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/arch-linux-install-challenge-on-mba/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/arch-linux-install-challenge-on-mba/</guid><description>知人から古い MacBookAir をいただいたので、 ArchLinux をインストールしてみました。 私は MacBook を所有したことがないので、これが1台目です。
いただいたのは10年前のモデルで、 MacBookAir3,2 (13inch, Late 2010) です。詳細スペックは、
CPU: Intel Core2Duo 2.13GHz RAM: 4GB SSD: 256GB といった感じです。
Arch は何回も壊してインストールし直しているので、久しぶりですが何も見ずにサクサク進めることができます。 ……という慢心がいけないんですよね、grub の設定をある程度忘れていたのと、ネットワーク設定を忘れて再起動してしまいました。
諦めが悪いので、USB キーを差して airootfs をマウントして netctl を叩いてみたのですが、 chroot だと全て ignore されてしまい、 chroot なしで実行しようとすると netctl や wpa_supplicant 関連のファイルをコピーしないといけないため、面倒になって諦めました。
その後 netctl と wpa_supplicant をインストールして再起動したのですが、 dhcpcd がインストールされていませんでした。 過去のインストールでは明示的にインストールした覚えがないのですが、依存などが変わったのでしょうか。 後で ArchWiki を見てみようと思います。
また、 CPU は rdrand をサポートしておらず、 /dev/hwrng は生えているものの rng-tools を入れても使えなかった(cat してみても エラーが出る)ので、乱数生成は遅い感じになりつらいですね(まあ実際何がつらいかと言われればあまりないのですが……。)
AUR のメンテナになるときに検証環境は qemu/kvm などでいいかなと思っていたのですが、やっぱりハードウェア関連など実機で 検証しないといけないなと実感しました。</description></item><item><title>ArchLinuxの日本コミュニティに貢献します</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/started-contributing-to-archlinuxjp/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/started-contributing-to-archlinuxjp/</guid><description>ArchLinux を使い始めてもう5年以上経ちますが、今まではあまりコミュニティに貢献していませんでした。 今まで ArchWiki などにたくさん助けられてきたので、これからは自分も貢献して恩返しをしていこうと思います。
まず、 ArchWiki の日本語版が英語版に追従できていないのが少し気になりました。 Arch Description Translation Project 他 で kusakata さんが書かれている通り、
日本語版の ArchWiki の古さに眉を顰めている読者の方がいれば、編集に参加していただると幸いです
というわけなので、これからできるだけ毎日編集に参加しようと思います。 英語力に自信があるわけではありませんが、英語に触れる時間を増やすことで向上させていければなと思っています。
また、 Orphaned な AUR のパッケージのメンテナになることも平行して進めていこうと思っています。 こちらは生半可な気持ちで引き受けていいのかあまり自信がなく、更新時にどこまでテストすればいいのかも あまりよく分かっていない/自分の中でも決め切れていませんが、とりあえず古いまま放置されるよりかは更新する方がいいかと 思って引き受けてみようと考えています。もちろん、 upsteam の release を watch することもセットで。
というわけで、(もし ArchLinux 関係の方がこのポストを見ることがあれば)これからよろしくお願いします。 ある程度雰囲気には慣れているつもりなので突拍子もないことはしないと思いますが、 間違っていること・直した方がいいことがあれば気軽に連絡ください。</description></item><item><title>HackMDでブログを書いてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/write-blog-with-hackmd/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/write-blog-with-hackmd/</guid><description>HackMD は、ブラウザ上で Markdown の編集・閲覧を複数人同時にできるサービスです。 HackMD には Markdown を GitHub に push できる機能があるので、これを使ってブログを書いてみました。
メリットとしては、ライブプレビューができる、などがありますが、モダンなエディターだとライブプレビューが可能だったりするので、……メリットは特にないかもしれません。 あと、画像などの添付には多分対応していないので、普段画像をよく使う場合は不便かもしれません。
まあ普段からブログのネタを HackMD にメモしているならば、そのまま書き始めることができてちょっと便利かもしれませんが、そうでもないかもしれません。 多分次からは普通にエディタで書くと思いました……。
追記： 完全にフライングしたので追記しました！これは 03/13 のポストなので……</description></item><item><title>ArchBSDプロジェクトのWebページ</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/archbsd-net/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/archbsd-net/</guid><description>毎度のことで気付くのが遅いのですが、 ArchBSD プロジェクトの Web サイト archbsd.net がなくなっていました。 GitHub の方にはいくつかレポジトリがあるようなので、プロジェクト自体はどこかで継続しているのかもしれませんが、 プロジェクトの Web サイトがなくなってしまっているのは残念です。
ところで、現在その URL にアクセスすると、不自然な日本語の記述された PR のようなサイトになっています。 ただ、特にアフィリエイトリンクがあるわけではなく、 SNS のシェアボタンがあるだけなので目的はよく分かりません。 不自然な日本語については、適当な文を抜き出して検索すると他でもヒットすることから、何らかの文章をベースに トピックごとに単語の置き換えなどで文章を生成しているように感じられます。 また、ベースの文章自体も、機械学習などを使って生成しているようにも感じられます。
Web に増え続けるスパム系のコンテンツはある程度見てきたつもりでしたが、こういうものは初めて見ました。 これによって得られる利益は不明ですが、自動生成っぽいスパムに時代の変化を感じました。</description></item><item><title>losetupで複数パーティションを持ったイメージファイルをマウントする</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/losetup-p-option/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/losetup-p-option/</guid><description>シングルパーティションのイメージファイルをマウントするのは今まで何度もやっていましたが、 ディスク丸ごとのイメージファイルをマウントした記憶は……あまりありません。 強いて言えば VM にアタッチして起動したくらいでしょうか。
losetup -fP を使うと複数のパーティションを含んだイメージファイルでループバックデバイスを セットアップできます。 -P オプションを指定すると、セットアップ後にカーネルにパーティションをスキャンさせるようです。 あとは普通に mount /dev/loop2p1 /mnt などとするとマウントできました。
手元の環境では起動時から /dev/loop0-7 が自動で作られていますが、これは誰が作っているのかなどは 分かっていないので、まだまだ知識の不足を感じますね……。</description></item><item><title>AmazonLinux2-minimalについて調べました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/amazon-linux-2-minimal/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/amazon-linux-2-minimal/</guid><description>AmazonLinux 自体は知っていましたが、どんなバリエーションがあるかなどはあまり知らず、 Docker を使いたいときは始めから入っている ECS optimized な AMI を選ぶなど適当だったので調べてみました。
まず、メジャーバージョンとしては現在1と2があるようで、 1 の方は 2020/12/31 に EOL となって、 2023/06/30 までメンテナンスサポートフェーズとなるようです。 そのため、これから使い始めるのであれば AmazonLinux2 にしておいた方がよさそうですね。
AmazonLinux2 は 通常版と minimal のものがあり、通常版でも標準で入っているパッケージは少なめなようですが minimal の方はさらに少なくなっています。 とはいえ、 bash や curl は始めから入っていますし、気になるのは awscli が入っていないことくらいでしょうか。 普段 docker で alpine をよく使っているので、むしろ minimal がまだ削れそうに感じます。
また、 amazon-linux-extras コマンドから追加のソフトウェアをインストールすることができるので、 困ることはほとんどないと思います。 docker や epel もコマンド1つで入りますし、変わったものでは ecs クライアントもインストールすることができます。
今まで適当に ECS Optimized な AMI を使っていましたが、 AmazonLinux2-minimal を積極的に使っていこうと思いました。</description></item><item><title>ブログのビルドが失敗するようになったのでnpmパッケージをアップデートしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/update-npm-packages-for-gatsby/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/update-npm-packages-for-gatsby/</guid><description>この Gatsby のブログは Github Actions でビルドしているのですが、5日くらい前からビルドに失敗するようになっていました。 手元ではビルドできるので、 npm run deploy を手動で実行してデプロイしていたのですが、 ずっと放置しているわけにはいかないので直しました。
本当は mxschmitt/action-tmate - GitHub を使ってデバッグするつもりだったのですが、 npm パッケージをアップデートしたら直りました。
npm audit で found 10 vulnerabilities (1 moderate, 9 high) になっているのが少し気になりますが…… acorn は package-lock.json を見る限りだと 7.1.1 が入っているように見えますね……、 npm audit について調べてみないと分からないですが、今回は Gatsby なのであまり影響はないかなと認識しています。</description></item><item><title>CoreOS rktプロジェクトが終了していました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/rkt-project-ended/</link><pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/rkt-project-ended/</guid><description>CoreOS のプロジェクトが終了して Fedora CoreOS が後続になるという話は知っていたのですが、 rkt プロジェクトもそれに伴って終了していたようです。
Github の rkt/rkt も Archived になっていて特に代替になるものや 活発に開発されている fork も今のところなさそうです。
他のコンテナランタイムとしては runc や、 kubernetes 用の cri-o などもありますが、 runc は containerd から利用されているようで(前 Docker のリリースか何かで読んだ気がする)、 Docker/rkt を置き換えるものではないですね……。
まあ単純に Docker を使えばいいんだとは思いますが……、Docker のセキュリティ面での懸念に対処していた rkt プロジェクトが終了してしまうのは個人的に残念でした。</description></item><item><title>JetBrainsのYouTrack</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/jetbrains-youtrack/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/jetbrains-youtrack/</guid><description>家庭内のタスクを管理するためのツールを探していて、 Redmine, Trac, Backlog などは知っていたのですが、 JetBrains も YouTrack という プロジェクト管理ツールを出していることを知りました。
クラウド版のほか、スタンドアロン版を自分でホスティングすることもできるようです。 また、スタンドアロン版の場合は10ユーザーまで制限なしで無料で使うことができるようなので、 試しに使ってみようかなと思いました。</description></item><item><title>Dockerの最新版をCentOSにインストールしてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/install-latest-docker-on-centos/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/install-latest-docker-on-centos/</guid><description>CentOS のパッケージは、普段使っている ArchLinux に比べるとかなり古いです。 しかし、 epel などのレポジトリを使うことで、比較的新しいバージョンを使うことができます。
docker は CentOS 用のインストールマニュアル があるので、これに従えばよいです。
まず、既に docker がインストールされている場合は yum remove コマンドで削除します。 そして、 yum-utils device-mapper-persistent-data lvm2 パッケージをインストールします。 (手元の環境では全て最新版がインストールされていました。) 次に、 Docker CE のレポジトリを追加します。 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
あとは yum install docker-ce docker-ce-cli containerd.io を実行すれば最新版がインストールされます。
また、 docker-compose はこの状態で yum でインストールしようとすると古いバージョンが入るので、 pip を使ってインストールしてあげると最新版がインストールされます。 ただ、インストールが /usr/local/bin/ 以下になることがあり、 sudo 時の PATH に含まれていないことがあるので 注意が必要です。(とりあえずはフルパスで指定すると動きます。)
ArchLinux を使っていると pip も 3 が標準な気がしてしまいますが、他の disto では 3 の suffix がついているんですね。 そろそろ 2 系も EOL なので、 suffix なしの 3 系が標準になってほしいものです。</description></item><item><title>earlyoomに投げたPRがマージされました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/merged-my-pull-request-for-earlyoom/</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/merged-my-pull-request-for-earlyoom/</guid><description>earlyoomがcommunityレポジトリに入っていました に書いた通り、 earlyoom が community レポジトリに入ったので、 earlyoom の README のリンクを修正して PullRequest を投げました。
README: Update Arch Linux package #168
+2, -3 行の小さな PullRequest ですが、これからも継続して OSS に貢献していこうと思います。</description></item><item><title>earlyoomがcommunityレポジトリに入っていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/earlyoom-in-community-repo/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/earlyoom-in-community-repo/</guid><description>earlyoom が Fedora32 でデフォルトで有効化 されるようですが、 ArchLinux には AUR にあって公式レポジトリにない状況でした。
しかし、つい2時間前に community/earlyoom に入っていたようです。
最近ではほとんど AUR のパッケージを利用することはないような気がしています。 Trusted User の皆さんに感謝しないといけないですね。</description></item><item><title>passmenu をカスタマイズしてみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/customize-passmenu/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/customize-passmenu/</guid><description>パスワードマネージャーには Pass / password-store を使っていて、 GUI 環境での入力には passmenu を使っているのですが、 passmenu のデフォルト動作は クリップボードへのコピーで、 直接入力させるには --type オプションを付ける必要があり少し面倒だったので、動作をカスタマイズしてみました。
オリジナルのソースは contrib/dmenu にあります。 pass は全体がそうなのですが、中身はシンプルな bash スクリプトなので、好きなように修正してしまいます。
#!/usr/bin/env bash shopt -s nullglob globstar line=1 if [[ &amp;#34;$1&amp;#34; =~ ^[0-9]+$ ]]; then line=$1 shift fi prefix=${PASSWORD_STORE_DIR-~/.password-store} password_files=( &amp;#34;$prefix&amp;#34;/**/*.gpg ) password_files=( &amp;#34;${password_files[@]#&amp;#34;$prefix&amp;#34;/}&amp;#34; ) password_files=( &amp;#34;${password_files[@]%.gpg}&amp;#34; ) password=$(printf &amp;#39;%s\n&amp;#39; &amp;#34;${password_files[@]}&amp;#34; | dmenu) [[ -n $password ]] || exit pass $@ &amp;#34;$password&amp;#34; | tail -n+$line | head -n1 | tr -d &amp;#39;\n&amp;#39; | xdotool type --clearmodifiers --file - 直接 type して欲しいときの方が多いのでデフォルト動作を type に変更 (コピーしたかったら pass コマンドを使うので、というか直接 type させる以外する必要ない気が……) 複数行に対応するため、1つめの引数が数字であればその行を出力するように変更 otp なども入力できるように、以降の引数は dmenu ではなく pass に渡すように変更 などをしました。</description></item><item><title>Scala.js 1.0 がリリースされました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/scalajs-1-0-released/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/scalajs-1-0-released/</guid><description>ずっと待っていたのですが、ついに Scala.js の v1.0 がリリースされていたようです。
Announcing Scala.js 1.0.0
Scala などに慣れてしまって、 javascript や python などは書きにくく感じてくるようになりました。 Scala.js が 1.0 になったことで業務にも採用しやすくなったかな？と思います。 ひとまず業務外で実際に使っていきたいです。</description></item><item><title>SpotFleet内の複数インスタンスで連番を生成するスクリプト</title><link>https://ny-a.github.io/hugo-blog/posts/2020-03/sequential-number-in-spot-fleet-instances/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-03/sequential-number-in-spot-fleet-instances/</guid><description>AWS でスポットインスタンスを複数起動して大量の処理を行うことがたまにあります。 Terraform で SpotFleet をリクエストして複数のインスタンスを立ち上げることはできますが、個別に user_data を指定するのは 少し面倒です。
ただ、同じ user_data でも、重複しない連番さえ取ることができればなんとかなることも多いはず……と思っていて、 パラメータストアを使ったり DynamoDB の AtomicCounter を使ったりしているようですが、 AWS CLI + jq だけで生成する方法を考えてみました。
スクリプト #!/bin/bash TOKEN=$(curl -s -XPUT &amp;#34;http://169.254.169.254/latest/api/token&amp;#34; -H &amp;#34;X-aws-ec2-metadata-token-ttl-seconds: 21600&amp;#34;) INSTANCE_ID=$(curl -sH &amp;#34;X-aws-ec2-metadata-token: $TOKEN&amp;#34; http://169.254.169.254/latest/meta-data/instance-id) FLEET_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID | jq -r &amp;#39;.Reservations[].Instances[].Tags[] | select(.Key == &amp;#34;aws:ec2spot:fleet-request-id&amp;#34;).Value&amp;#39;) TARGET_CAPACITY=$(aws ec2 describe-spot-fleet-requests --spot-fleet-request-ids $FLEET_ID | jq &amp;#39;.SpotFleetRequestConfigs[].SpotFleetRequestConfig.TargetCapacity&amp;#39;) while true; do aws ec2 describe-instances --filter Name=tag:aws:ec2spot:fleet-request-id,Values=$FLEET_ID | jq -r &amp;#39;.Reservations[].Instances[].InstanceId&amp;#39; | sort &amp;gt; /tmp/instance_ids.</description></item><item><title>sudoに-iオプションをつけるとクオートの挙動が変わってハマりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/sudo-with-login-option-behavior-of-quote/</link><pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/sudo-with-login-option-behavior-of-quote/</guid><description>sudo コマンドには -i/--login オプションがあり、コマンドを走らせるユーザー(デフォルトは root)のログインシェルを 使ってコマンドを実行できますが、このオプションを指定する場合としない場合でクオートの扱いが変わってハマってしまいました。
具体的には、EC2 の root で実行される user_data スクリプトで、 パスフレーズなしのキーペアを生成する際に
sudo -u ec2-user -i ssh-keygen -f .ssh/id_rsa -N &amp;#39;&amp;#39; とすると、 option requires an argument -- N というエラーが発生してしまいます。
(ちなみにここで生成したキーペアは、 git clone をするための deploy key として使おうとしています。 user_data とはいえ private key を含めたくなかったので、インスタンスで生成して public key を登録する形にしました。 結局 API を叩くときなどに使用する token/secret は user_data に含めることになるんですが……)
issues この問題ズバリの issue が5年前に出ていますが、1つもコメントはついていません。 Bug 679 - sudo -i ignores empty arguments
10 年前の Bug 413 - Unexpected change in quoting behaviour with -i flag も同じ問題を指しているように読めますが、こちらも1ヶ月経たずに放置されてしまっています。</description></item><item><title>GitHubのdependabotにPRをもらったのでマージしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/github-dependabot/</link><pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/github-dependabot/</guid><description>Jekyll で作ったブログのレポジトリに dependabot から PullRequest が来ていたのでマージしてみました。 今回はついでに他の Gem もアップデートしたので、コマンドラインからマージしました。
来た PullRequest は Bump nokogiri from 1.10.7 to 1.10.8 #1 です。
PR のブランチは dependabot/bundler/nokogiri-1.10.8 に切られていました。 単に git fetch すれば降ってきます。 git merge dependabot/bundler/nokogiri-1.10.8 すれば手元でのマージができるので、 git push origin master して PullRequest のマージが完了します。 PR のブランチは push 時に自動で削除されました。
git fetch -p すればリモートトラッキングブランチが削除されて、全て完了します。
CVE などを購読して使っているソフトウェアのバージョンを管理するのは大変なので、 (GitHub 上の OSS に限りますが)セキュリティの問題を監視してもらえるのは助かります。 (今回は static なページだったのであまり影響はないと思いますが……。)</description></item><item><title>DNSSECの設定をしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/set-up-dnssec/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/set-up-dnssec/</guid><description>クライアント側もドメイン側も、設定するだけで DNSSEC が使える状態になっていたので、両方とも設定して DNSSEC を有効にしてみました。
クライアント設定 DNS リゾルバは systemd-resolved を使っているので、 DNSSEC 対応の DNS サーバーが使われていれば DNSSEC が有効になります。 1.1.1.1 や 8.8.8.8 は DNSSEC に対応しています。 しかし、ルーターなどが提供するリゾルバは対応していないことが多いので、それをデフォルトで使っていて無効になっていました。 1.1.1.1 を直接使うように設定するには、 /etc/systemd/resolved.conf に以下の行を追加します。
DNS=1.1.1.1
あとは sudo systemctl restart systemd-resolve を実行して、 systemd-resolved サービスを再起動すれば有効になります。
有効になっていれば、 resolvectl query sigfail.verteiltesysteme.net を実行すると invalid とエラーが出るはずです。
ドメインの設定 DNSSEC対応の独自ドメインを年額$0.88で運用できるよという話 を見ると、海外のレジストラは DNSSEC に対応しているところが多いようです。 私の使っている nyaw.dev は Gandi で取得したため、ボタン1つで有効化することができました。
nyaw.dev - dnsviz を確認すると、正常に設定されていることが確認できます。
といっても、リダイレクトさせているのであんまり嬉しくはないんですが……。
ブログだけではなくポートフォリオも含めてページを充実させていって、ドメイン設定もきちんとしていこうと思っています。</description></item><item><title>Xorgの仮想ディスプレイについて調べました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/virtual-heads-of-xf86-video-intel/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/virtual-heads-of-xf86-video-intel/</guid><description>Linux デスクトップで、他のデバイスを VNC などを使って仮想的にワイアレスディスプレイとして使うために、 仮想ディスプレイを追加する方法を調べました。
余っているディスプレイ出力を使う [SOLVED] Creating a Virtual Display/monitor - Arch Forum を見ると、余っている(ディスプレイを接続していない)ディスプレイ出力を使用して仮想ディスプレイを作成することができるようです。 ディスプレイを接続して表示している状態で切断した状態と同じだと思います。
ただ、前回これを使って VNC で接続した場合、リフレッシュレートがかなり下がってしまっていた記憶があるため、 他の方法を探してみました。
VIRTUAL1を作成する Add VIRTUAL output to Xorg - Stack Exchange を見てみると、 intel ドライバを使って VirtualHeads を作成することができるようです。
sudo pacman -S xf86-video-intel cat &amp;lt;&amp;lt;EOH | sudo tee /etc/X11/xorg.conf.d/20-intel-virtual-heads.conf Section &amp;#34;Device&amp;#34; Identifier &amp;#34;intelgpu0&amp;#34; Driver &amp;#34;intel&amp;#34; Option &amp;#34;VirtualHeads&amp;#34; &amp;#34;2&amp;#34; EndSection EOH Xorg を再起動すると、output として VIRTUAL1 が追加されています。
ただ、 Intel Graphics - Arch Wiki に書かれていますが、 xf86-video-intel は非推奨扱いになっていて、標準の modesetting ドライバが推奨されているようです。</description></item><item><title>EC2にECDSAのキーを使ってSSHできるようにしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/use-ecdsa-key-on-ec2/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/use-ecdsa-key-on-ec2/</guid><description>AWS のキーペアは RSA しか対応していないと思いますが、最近は RSA を使うこともかなり減っていて、新しくセットアップした PC などでは ECDSA/Ed25519 のキーしか作っていないこともあります。 そこで、 UserData を使って普段使いの SSH キーを取得して SSH できるようにしました。
UserData AmazonLinux2 を使っているので、ログインユーザーは ec2-user です。
UserData を以下のようにします。
#!/bin/bash set -eu curl https://github.com/ny-a.keys &amp;gt;&amp;gt; /home/ec2-user/.ssh/authorized_keys AmazonLinux に入っている OpenSSH のバージョンが古くて RSA にしか対応していないわけではないので、 authorized_keys に入れてあげさえすれば使うことができます。
AWS のキーペアで管理しないため、本番環境などでは何か問題があるかも……とは思いますが、普段使いのキーを使える上に、 普段使いのキーを更新したあとに起動したインスタンスは新しいキーを使えるようになるので、利便性は高いんじゃないかなと 思います。
とりあえず、開発中などはこのようにすると便利そうだと思いました。</description></item><item><title>AWS CLIでAssumeRole</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/aws-cli-assume-role/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/aws-cli-assume-role/</guid><description>AWS のアカウントを CLI から操作することが多いので credentials を保存しているのですが、 権限を多く持ったユーザーの認証情報を持っておくのは少し不安になったので、 AssumeRole を使って普段はあまり権限を 持たないユーザーの認証情報を持っておくことにしました。
方法 方法は How do I assume an IAM role using the AWS CLI? に書いてある通りです。
AssumeRole 時に MFA を要求するように設定することもできます。
また、 Using an IAM Role in the AWS CLI に記載のあるように、 AWS CLI では --profile オプションで指定することにより、自動で簡単に AssumeRole を 使用することができます。
MFA を併用することで、 TOTP をパスワードとした sudo のような操作も可能になります。 また、検証環境と本番環境のロールを分けるといったことも考えられます。 誤操作を防ぎ、安全性を高められると思うので、このような機能は積極的に使っていこうと思いました。</description></item><item><title>/dev/randomが遅かったので高速化を試してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/hwrng-is-slow/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/hwrng-is-slow/</guid><description>ArchLinux をインストールしているノート PC に rng-tools をインストールして、 初期設定の状態で rngd.service を起動していたのですが、乱数生成が遅く感じたので調べてみました。
乱数生成の速度計測 乱数生成の速度の計測は以下のコマンドで行いました。
sudo dd if=/dev/random of=/dev/null bs=1 count=1000000 iflag=fullblock status=progress この結果が、前から使っているノート PC では 400kB/s 程度出ていて、 Rng-tools - ArchWiki では 50kB/s 程度出ていれば問題ないと書かれていますが、 新しい方のノート PC では 4kB/s 程度でした。
/dev を確認してみると、 /dev/hwrng は存在して、 rngd もそれを認識して正常に使用しているようでした。 搭載している tpm は 2.0 で、特に tpm 関連のエラーも出ていません。 また、 lscpu で確認すると、 rdrand rdseed 両方のフラグが立っています。
rngd のソースの優先順位 rngd(8) の Entropy_Source を見ると、
hwrng tpm rdrand darn nist jitter pkcs11 の順で使用するようです。</description></item><item><title>nftablesでdockerを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/nftables-with-docker/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/nftables-with-docker/</guid><description>Linux 3.13 から利用可能な、 iptables を置き換える(ことを目的とした)パケット分類フレームワークの(ファイアーウォール？) nftables を、 docker を使っている環境で使ってみました。
インストール・有効化 Docker から使うには、 iptables の互換フロントエンドをインストールする必要があります。 nftables と一緒にインストールするには、以下を実行します。 (iptables-nft は iptables を置き換えます。)
sudo pacman -S nftables iptables-nft nftables.service を起動すると、 /etc/nftables.conf から設定を読み込みます。 起動・自動的に起動するようにするには、以下を実行します。
sudo systemctl enbale --now nftables ArchLinux の nftables パッケージの etc/nftables.conf には、 シンプルでセキュアなファイアーウォールが設定されています。 1:0.9.3-1 時点での設定内容は以下の通りです。
#!/usr/bin/nft -f # ipv4/ipv6 Simple &amp;amp; Safe Firewall # you can find examples in /usr/share/nftables/ table inet filter { chain input { type filter hook input priority 0; # allow established/related connections ct state {established, related} accept # early drop of invalid connections ct state invalid drop # allow from loopback iifname lo accept # allow icmp ip protocol icmp accept ip6 nexthdr icmpv6 accept # allow ssh tcp dport ssh accept # everything else reject with icmpx type port-unreachable } chain forward { type filter hook forward priority 0; drop } chain output { type filter hook output priority 0; } } # vim:set ts=2 sw=2 et: Docker を使用するための設定 標準のままだと、 Docker コンテナとの通信は forward チェインのルールにより drop されてしまいます。 docker エンジンによって作成される DOCKER-USER チェインのパケットを accept するには、以下のコマンドを実行します。</description></item><item><title>XRandRが自動で解像度を変えてくれると思ったら勘違いでした</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/xrandr-changes-resolution/</link><pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/xrandr-changes-resolution/</guid><description>Linux でマルチモニタ環境で使用する場合、モニタの設定は xrandr などを使って行いますが、 解像度の高い設定にしている状態でケーブルを抜き、解像度の低いモニタに接続した場合、 前は割とひどいことになったような気がしていたのですが、今試したところ最適な感じで縮小されて 表示されたので、動作を調べてみました。
既にタイトルに書いてある通りこれは勘違いで、 xrandr は設定してある解像度で出力しているだけで、 モニタ側が自動で縮小してくれていたようでした。 モニタで縮小していても、 xrandr --output DP-1 --scale-from 1920x1080 のように xrandr で縮小しても、 見た目は変わらないので……。
全部 FullHD のモニタで統一すれば何も問題はないですが、現状そうなってはいないので…… まあモニタの接続を変更することは基本的にないので、出先等で何かする場合以外は特に問題になることもなさそうではあります。</description></item><item><title>RootKeySigningKeyCeremonyの延期</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/rescheduling-root-ksk-ceremony-40/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/rescheduling-root-ksk-ceremony-40/</guid><description>DNSSEC の Root KSK Ceremony が、金庫が開かなくなったため延期されていたようです。
Rescheduling Root KSK Ceremony 40 で告知されていますが、 @joao_damas さんのツイート で写真を見ると分かりやすいですね。
IANA のサイト では、延期されたセレモニーの動画を見ることができます。 HSM を使っていたり、かなり厳重なセキュリティを確保しているのが分かりました。</description></item><item><title>ターミナルの色をAppSignalベースに変更しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/terminal-color-from-appsignal/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/terminal-color-from-appsignal/</guid><description>ターミナルエミュレータは rxvt-unicode を使っていて、デフォルトの白背景で使っているのですが、 黄色の文字がどうにも見えなくて困っていました。
ターミナルの基本的な ANSI escape sequence に対応する色は ANSI_escape_code - Wikipedia に一覧があります。 rxvt-unicode は xterm のものとほぼ同じようです。
白背景で見やすい色の組み合わせを探してみたところ、 jeffkreeftmeijer/appsignal.terminal が白背景でも黒背景でも見やすく感じたため、試してみました。
itermcolors は XML で RGB それぞれ 0-1 の実数値で表現されているようなので、きっと先人が hex に変換するスクリプトを 公開しているはずです。 Gist にありましたが、 Color Space が入っているものに対応していないようだったので、少し修正して Gist に公開しておきました。
さて、基本は上記スクリプトで変換して Xresources に設定するだけですが、赤だったところが青になったり、少し違和感を 感じました。そこで、色の対応を似ているものに変更してみました。
URxvt.color0: #463f31 URxvt.color4: #3316c3 URxvt.color2: #50af4c URxvt.color6: #04aaef URxvt.color5: #c46109 URxvt.color1: #8f0c8a URxvt.color3: #8a7d06 URxvt.color7: #c5beb0 URxvt.color8: #5f584a URxvt.color12: #7255ff URxvt.color10: #8fee8b URxvt.color14: #43e9ff URxvt.color13: #ffa048 URxvt.color9: #ce4bc9 URxvt.</description></item><item><title>OpenSSH8.2でFIDO2を試しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/tried-openssh-8-2-fido/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/tried-openssh-8-2-fido/</guid><description>といってもキーの生成だけですが……
とりあえず手元にある古い(？) Yubikey を使って ecdsa-sk のキーの生成ができることを確認してみます。
$ ssh-keygen -t ecdsa-sk -b 521 Generating public/private ecdsa-sk key pair. You may need to touch your authenticator to authorize key generation. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ... Your public key has been saved in ... The key fingerprint is: SHA256:LHym5H0zQ6tvRXNZp/bMEUy7F1WN6tUicAGJMjxSOZQ ... The key&amp;#39;s randomart image is: +-[ECDSA-SK 256]--+ | +oo ..o..oo=| | .</description></item><item><title>OpenSSH8.2でfido2/u2fを試そうとしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/tried-to-openssh-8-2-fido/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/tried-to-openssh-8-2-fido/</guid><description>OpenSSH 8.2 がリリースされ、 fido2/u2f が公式にサポートされたようなので試してみました。
私は ArchLinux を使っているので比較的早くパッケージが降ってきます。 具体的には、 2020-02-14 にリリースされ、当日中には testing レポジトリに入り、 2020-02-16 03:30Z に core レポジトリに入りました。 core に入ったことにより pacman -Syu でインストールできるようになったので試してみましょう。
OpenSSH 8.2 のリリースノート を見ると、 ssh-keygen -t ecdsa-sk で FIDO token backed key を生成することができるようですが、 試してみると、
$ ssh-keygen -t ecdsa-sk :( Generating public/private ecdsa-sk key pair. You may need to touch your authenticator to authorize key generation. Provider &amp;#34;&amp;#34; dlsym(sk_api_version) failed: /usr/lib/ssh/ssh-sk-helper: undefined symbol: sk_api_version Key enrollment failed: invalid format となり失敗します。</description></item><item><title>Git rerereサブコマンドを知りました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/git-rerere/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/git-rerere/</guid><description>The Git Rerere Command — Automate Solutions to Fix Merge Conflicts を見て git-rerere サブコマンドを知りました。 と言ってもまだ experimental なようで、 git config [--global] rerere.enabled true を実行しないと使えないようです。
上記の記事を見て少し試してみましたが、業務では今のところ使おうとは思いませんでした。 conflict したときに git consult みたいなコマンドを呼んで、過去の似た conflict 解消を含む merge commit を参照して、 似たような解決を試みるようなものが欲しいのかなと思いました。 といっても、それだと rebase なんかを consult できないので、 rerere の方が少し強力ではありますが。
git-rerere のドキュメント をちらっと見てみて、他にもいろいろな サブコマンドがあるのでそれを見てみたら、 git-worktree など知らないコマンドを知ることができて楽しいです。
とはいえ、 git も複雑になりすぎているのでは……と思うこともあります。 サブコマンドに分かれているとはいえ……</description></item><item><title>NFCカードリーダーを買いました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/acr122-nfc-reader/</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/acr122-nfc-reader/</guid><description>PaSoRi でいいのでは？と思ったけど ACR122U の方が安いみたい？だったのでそっちを買ってみました。 マイナンバーカードとかも読めるようです。
届いたのでいろいろ触ってみているのですが、どうも期待していたマイナンバーカードや Smart Card の読み取りを うまくさせることができません。 acsccid とかいろいろ入れてみたのですが……
PaSoRi 買いましょう。多分そっちの方が早い。 (libnfc ではちゃんと読めてるようなんですが…… PIV とか使いたいので微妙な気持ち。)</description></item><item><title>DevelopersSummitの1日目に行きました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/developers-summit-day-1/</link><pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/developers-summit-day-1/</guid><description>Developers Summit の1日目に行ってきました。 楽しみにしていた 6gram のセッションを聞くことができました。
基本は SRE Next のスライドとほぼ同じような内容でしたが、 ApplePay/GooglePay との Token Service Provider 連携の方法で、 決済速度や PCI DSS 準拠部分の切り出しなどの比較があり、kyash の高速化も同じようなことをしたのかななどと考えていました。
LINE のプライベートクラウドや、星野リゾートの話も参考になりました。</description></item><item><title>手元のYubikey5NFCのECCの対応状況を調べました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/yubikey-5-1-2-ecc-capabilities/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/yubikey-5-1-2-ecc-capabilities/</guid><description>Yubikeyのファームウェア5.2.3がリリースされていました で、新しい Yubikey では Ed25519 などの ECC (楕円曲線暗号) に対応していることを知りましたが、 手元にある v5.1.2 の Yubikey の対応状況を調べてみました。
Yubikey の商品説明のページには、 RSA 2048, RSA 4096 (PGP), ECC p256, ECC p384 と書いてあります。私はてっきり OpenPGP モードでも ECC p384 が使えると思っていたのですが、 どうやら OpenPGP では RSA 2048/4096 、 PIV では 3DES, RSA 1024/2048, ECC p256/384 が使えるようです。
ますます新しい Yubikey が欲しくなってきたのですが、まだまだ PIV あたりの仕様や PGP Smartcard などについても 慣れていないので、まずはいろいろ試してみようと思いました。</description></item><item><title>Removing diversion by rpikernelhack</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/rpikernelhack/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/rpikernelhack/</guid><description>Raspbian のインストールをしていたのですが、 apt-get upgrade を実行すると見慣れない rpikernelhack という文字を 見掛けました。
検索してみると、Stack Exchange で fake package だという情報が 見つかりました。 fat32 では Hard link がサポートされていないから、 dpkg の diversion という機能を使用(濫用？)しているようです。
RPi forum の upgrade to unbootable と同じようなメッセージを見かけたのですが、どうもファイルシステムのサイズを拡張する前にアップグレードすると このようなメッセージが出ると書いてあります。
初回起動時にファイルシステムのサイズが調整されると思っていて、それは済んでいるはずですがそれとは違うんでしょうか。 今のところ再起動しても起動しなくなるようなことはないですが、初回アップグレード前に一度再起動する必要があると いうことなんでしょうかね。</description></item><item><title>ブラウザ上でssh-keygenができるツール</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/npm-ssh-keygen/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/npm-ssh-keygen/</guid><description>ssh-keygenをブラウザだけでローカルで安全に鍵生成するWebアプリ を見つけました。
Secure ssh-keygen only on Web browser
Web Crypto API を使って実現しているようです。
上記の Web アプリでは RSA にしか対応していませんが、 Web Crypto は ECDSA にも対応しているようです。 EdDSA には対応していないんでしょうか。 乱数ソースも提供されているので、 EdDSA は javascript で実装してしまえば……などと思いました。 EdDSA についてあまりよく分かっていないので調査しようと思いました。</description></item><item><title>Android用e-Taxアプリで確定申告をしようとしてハマりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/e-tax-for-android/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/e-tax-for-android/</guid><description>今年からマイナンバーカードと Android 端末 / iPhone を使って確定申告ができるようになりましたが、 Android の e-Tax アプリから確定申告をしようとしても辿りつけませんでした。
e-Tax アプリを起動すると、
e-Taxソフト(SP版) 確定申告書等の送信結果一覧 の2つのメニューが表示され、 e-Tax ソフトを選べば確定申告ができると思ったのですが、そうではありませんでした。
確定申告をするには、 PC と同じく 国税庁 確定申告書等作成コーナー から作成する必要があるようです。 e-Tax アプリと JPKIMobile は、単にカードを読み取るときに呼び出されるという形のようです。
e-Tax アプリに確定申告書等作成コーナーへのリンクをつけることはできなかったんでしょうか…… e-Tax ソフト(SP版) のメニューをくまなく探してしまったので、少しがっかりしました。</description></item><item><title>DNSSEC validation failed エラー</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/dnssec-error/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/dnssec-error/</guid><description>Raspberry Pi に ArchLinux をインストールして RTC モジュールの設定をしてみたのですがうまくいかず、 DNSSEC のエラーでホスト名の解決ができない問題に遭遇しました。
始めの問題としては、 pacman -Syu が通りませんでした。
$ sudo pacman -Syu :: Synchronizing package databases... error: failed retrieving file &amp;#39;core.db&amp;#39; from mirror.archlinuxarm.org : Could not resolve host: mirror.archlinuxarm.org error: failed to update core (invalid url for server) error: failed retrieving file &amp;#39;extra.db&amp;#39; from mirror.archlinuxarm.org : Could not resolve host: mirror.archlinuxarm.org error: failed to update extra (invalid url for server) error: failed retrieving file &amp;#39;community.db&amp;#39; from mirror.</description></item><item><title>RaspberryPi(Raspbian)にRTCモジュール(DS3231)を接続しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/connect-rtc-ds3231-to-raspberry-pi/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/connect-rtc-ds3231-to-raspberry-pi/</guid><description>エアギャップコンピュータを準備するにあたって、時刻合わせは面倒な課題です。 特に GPG などで証明書を発行する場合、発行する日の情報は必要不可欠だからです。
ただ、普通のコンピュータは NTP などでインターネットから時刻情報を取得できますが、 Raspberry Pi をオフラインで使用すると、 RTC モジュールが搭載されていないため、 毎回時刻を手動で合わせる必要があります。
そこで、 I2C 接続で 1000円程度で買うことができる RTC モジュールを接続してみました。
Raspbian での設定は Install DS3231 Real Time Clock - Latest Info に書いてある通りです。 ArchLinux だと /boot/config.txt の1行だけでいけたかもしれません。明日もう一度確認してみます。</description></item><item><title>DevelopersSummitに申し込みました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/applied-to-developers-summit/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/applied-to-developers-summit/</guid><description>Developers Summit、略してデブサミですが、今まで名前は聞いたことはあったものの参加したことはなかったので、 今年こそはと申し込んでみました。
Developers Summit 2020 のタイムテーブル を見ると、 ほとんどのセッションが満員かほぼ満員になっているようです。 あまりこのような大規模なイベントに参加したことがないので驚きました。
ただ、申し込み締め切りの1週間前(イベントの2週間前)に申し込んだときには、セッションのいくつかが調整中になっていたのが 気になってしまいました。 もちろん、イベントの主催側に回ったこともあるので苦労はよく分かっているつもりですが、ここまで大規模なイベントに なっても同じような悩みというか、直前まで準備に忙しいような感じになるのは仕方ないのかな……という気持ちになりました。
イベントの開催も来週に迫りましたし、主催や出展のある方は頑張ってください！ 初参加なので楽しみにしています。</description></item><item><title>ターミナルでEnterが^Mになってしまうときの対処法</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/stty-to-fix-enter-key/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/stty-to-fix-enter-key/</guid><description>cat コマンドなどでターミナルにバイナリ(制御文字)を吐いてしまうと、 Enter キーを押しても sudo などのパスワード入力を確定できなくなることがあります。 (前使っていた xterm ではコマンドの入力もできなくなっていた気がしますが、 rxvt-unicode ではコマンドは使えるようです。)
Pressing enter produces ^M instead of a newline - Ask Ubuntu に書いてある通りですが、 stty sane (全てデフォルト値に戻す) か stty icrnl (CR を new line として扱う) を実行すれば直るようです。
これで遠慮なくバイナリを吐かせることができますね。 と思ったのですが、 Can “cat-ing” a file be a potential security risk? などを見るとセキュリティ上あまり好ましくないようですね……</description></item><item><title>YubikeyにGPGキーを登録しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/save-gpg-key-on-yubikey/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/save-gpg-key-on-yubikey/</guid><description>新しいGPGキーを作成しました で GPG キーを作成しましたが、 Yubikey も活用できるように Yubikey にも GPG キーを登録してみました。
マスターキーの入っている環境で新しくサブキーを作成します。 ykman piv や gpg コマンドで試した感じでは、手元の Yubikey には RSA 以外の ECDSA/EdDSA のキーを 登録することができませんでした。 (Yubikey5 NFC, Firmware 5.1.2 なのでできると思ったのですが……) そのため、 RSA 4096bit のサブキーを3種類作成します。
そして、それぞれ keytocard を実行して、 Yubikey に秘密鍵を移動します。 移動すると ssb&amp;gt; と表示され、 Card serial No. が表示されます(このあたりがどう保存されているか気になっています)。
あとは PIN を適宜変更するのですが、 gpg --edit-card と ykman piv で PIN の管理が別なのかはよく分かっていません。 (登録してみた感じだと別で管理されているようですが、きちんと調べられていません) gpg の PIN, Admin PIN, ykman piv の PIN, PUK に加え、 Management Key というものがありますが、 これは ykman piv change-management-key -p を実行して PIN を入力することで、 PIN から生成して PIN で認証するように することができます。</description></item><item><title>新しいGPGキーを作成しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/create-new-gpg-key/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/create-new-gpg-key/</guid><description>Yubikey もあることですし、そろそろ GPG や SSH の秘密鍵を統一しようと思います。 GPGで自分用の秘密鍵を1つに統一する を参考に進めていきました。
上記記事ではエアギャップコンピュータが推奨されていますが、今回はマスターキーのバックアップの 利便性のため、ネットワークに接続した状態で行いました。 QUBES OS はよさそうですね。 Fedora ベースなのが 少し気になるといえばそうですが……(ArchLinux に慣れているため)。
さて、普段使いの環境にはマスターキーの秘密鍵は置いておきたくないので、 マスターキーの生成は別の環境で行います。 バックアップの利便性なども考えて、 LUKS で暗号化したパーティションをファイルに保存します。
dd if=/dev/zero of=encrypted_partition.img bs=1M count=64 sudo cryptsetup luksFormat -i 5000 --use-random encrypted_partition.img # type &amp;#39;YES&amp;#39; and set password sudo cryptsetup luksOpen encrypted_partition.img gpg_container sudo mkfs.ext4 /dev/mapper/gpg_container sudo mount /dev/mapper/gpg_container /mnt sudo mkdir /mnt/.gnupg sudo chown [current_user] /mnt/.gnupg GPG の操作は今作成した /mnt/.gnupg を GNUPGHOME に設定して行います。 必要なだけマスターキーとサブキーを作成していきます。
GNUPGHOME=/mnt/.gnupg gpg --full-gen-key 作成が終わったら、サブキーだけをエクスポートします。キーの fingerprint は gpg -K で確認できます。</description></item><item><title>RasPiでcryptsetup benchmarkを実行してみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/cryptsetup-benchmark-on-raspi/</link><pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/cryptsetup-benchmark-on-raspi/</guid><description>タイトルの通りですが…… RaspberryPi 3B+ で cryptsetup benchmark を実行してみました。
$ cryptsetup benchmark # Tests are approximate using memory only (no storage IO). PBKDF2-sha1 206738 iterations per second for 256-bit key PBKDF2-sha256 316599 iterations per second for 256-bit key PBKDF2-sha512 200415 iterations per second for 256-bit key PBKDF2-ripemd160 174529 iterations per second for 256-bit key PBKDF2-whirlpool 29153 iterations per second for 256-bit key argon2i 4 iterations, 172077 memory, 4 parallel threads (CPUs) for 256-bit key (requested 2000 ms time) argon2id 4 iterations, 177813 memory, 4 parallel threads (CPUs) for 256-bit key (requested 2000 ms time) # Algorithm | Key | Encryption | Decryption aes-cbc 128b 28.</description></item><item><title>Yubikeyのファームウェア5.2.3がリリースされていました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/yubikey-firmware-5-2-3/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/yubikey-firmware-5-2-3/</guid><description>Yubikey を持っていますが、現在はあまり活用できていません。 その理由の1つに、普段使っている ed25519 なキーに Yubikey が対応していないことがあります。
今日ふとそのことについてもう一度調べていたら、 What’s New in YubiKey Firmware 5.2.3 というブログ記事を見つけました。 知らない間に ed25519 にも対応していたようです。 とはいえ、そのためだけに Yubikey を新調するのも気が進まないので、しばらくの間は NIST P-384 や RSA-4096 を使おうと思います。
エアギャップコンピュータを使って GPG の primary key の管理などをしようと思いつつなかなかできていないのですが、 キーのバックアップのことなどを考えて悩んでいます。紙に印刷する/光学メディアに書き込むなどの方法が一般的(？)な ようですが、紙や光学メディアも耐久性に不安があります。 金属板にレーザーで QR コードを印刷できれば……とは思いますが、さすがにコストがかかりすぎるので……</description></item><item><title>6gramを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-02/6gram-app/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-02/6gram-app/</guid><description>mixi の新しいアプリの 6gram というアプリを使ってみました。 サービス内容はおおまかには kyash と似ていると言えますが、 グループでお金を出し合うことができる、インスタントカードを30枚まで発行できる、 発行カードがJCBプリペイドである、といった違いがあります。
リアルカードは後日受付開始ということなので、現在はバーチャルカードでのオンライン決済と QUICPay を使用した実店舗での決済が可能なようです。 QUICPay の決済速度は、一度試した感じだと kyash の高速化後のイメージが近いかなと思いました。
アカウント登録時に発行されるバーチャルカードにはグループのカードを紐付けることができ、 紐付けると QUICPay で決済が可能になります。 任意に発行できるインスタントカードは紐付けることはできず、オンライン決済専用なようです。 考えてみれば QUICPay での支払い用にインスタントカードを発行する必要はありませんが…… 食費など Wallet を分ける用途で使えると思っていたので少し期待外れではありました。
また、インスタントカードやグループカードには100円単位でお金を出し入れすることが できます。グループの説明に「自由に出し入れ」「割り勘不要」とあるように、 グループメンバー全員が自発的に入金して大まかに出し合うような仲のいいメンバーでの 使用がターゲットなように感じます。
2月に入る前に iPhone 版もリリースされたので、気軽に勧められるようになりました。 公式の招待も割と早く届くようなので、気軽に招待リクエストを送ってみたらよさそうです。</description></item><item><title>GitHubActionsでGridsomeのブログのビルドを設定しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/config-gridsome-cd/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/config-gridsome-cd/</guid><description>昨日に続いて Gridsome のブログのビルドも自動化しました。
やっていることはほとんど Gatsby の場合と同じなので、設定ファイルを追加するだけです。
Jekyll のブログのビルドも一緒にやってしまおうと思っていたのですが、Jekyll のサブディレクトリの扱いが Gatsby/Gridsome と違っていたので一旦後回しにしようと思います。 現状ほぼ画像等使っていないので、Jekyll の想定するディレクトリ構造にしてしまってもいいのですが、 現状の方が好ましいような気がするので、方法を考えてみようと思っています。</description></item><item><title>GitHubActionsを使ってデプロイを自動化しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/config-continuous-delivery/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/config-continuous-delivery/</guid><description>先日はブログのコンテンツと Gatsby のテンプレートを分離しましたが、 コンテンツを push すると CI/CD で自動でビルド・デプロイまでできるようにしました。
ビルド環境は Gatsby の方のレポジトリですが、 push でトリガーされるのはコンテンツのレポジトリなため、 GitHub のフォーラム を参考に、コンテンツのレポジトリに push されたときに Gatsby のレポジトリのビルドをトリガーするようにしました。
この調子で Gridsome と Jekyll もビルド・デプロイを自動化して、デザインを統一しようと思います。 3つもデプロイする必要はないですが……。</description></item><item><title>Blogの内容を別レポジトリに移動しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/move-blog-contents-to-another-repo/</link><pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/move-blog-contents-to-another-repo/</guid><description>今までは gatsby のブログ用レポジトリにブログの内容を追加していましたが、 テンプレートと内容は分けた方がいいかなと思い、内容だけ別レポジトリに分けてみました。
具体的には、 gatsby-source-filesystem を使っていたのを gatsby-source-git に変更しました。 基本的に gatsby-source-filesystem と同様に使えると書いてありましたが、 slug の生成に createFilePath を使っていたのが gatsby-source-filesystem に依存していたので、 node.parent.file.relativeDirectory から生成するように変更しました。
また、 gatsby-source-git の指定だけだと、タイミングの問題なのか gatsby-transformer-remark あたりで 問題が発生していたので、 gatsby-source-filesystem でダミーのソースを指定することでとりあえず対処しました。
レポジトリを分離したので CI を使ってビルドするようにしようかなと思ったのですが、そうすると 別に gatsby-source-git を使わなくても、 CI 側で事前に checkout しておけばいいのでは……と思ってきました。 また戻すかもしれません。</description></item><item><title>grpc-nodeのビルドに失敗する</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/can-not-build-grpc-node/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/can-not-build-grpc-node/</guid><description>npm install grpc build from source fails に書いてある通りなのですが……。
node v13 ではソースからのビルドになってインストールに失敗します。 node v10 を使えばバイナリパッケージがあるようです。
nvm をインストールしてとりあえずの対処をしようと思います。</description></item><item><title>6gramとPCI-DSS</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/6gram-pci-dss/</link><pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/6gram-pci-dss/</guid><description>twitter で流れてきた グループウォレットアプリ6gramの運用をはじめてみた / 6gram SRE NEXT 2020 を見ました。
PCI DSS の概要については PCI DSS Quick Reference Guide これなんかに書いてある感じなんですかね？ PCI DSS については、クレジットカード情報の非保持化などは聞いたことがありますが、 具体的にまともに対応する場合の戦略などは聞いたことがなかったので、興味深いと感じました。
また、 Elixir で決済サービスをつくってみた によると、Elixir を使っているようで、私は Elixir を使ったことがないので使ってみたいと思いました。
Developers Summit でも 6gram のセッションがあるようなので、聞いてみたいと思いました。</description></item><item><title>gridsomeを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gridsome/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gridsome/</guid><description>いつものように 9 Projects you can do to become a Frontend Master in 2020 を進めていっています。 今回は gridsome を使ったブログです。
だいたい gatsby と同じような感じですが、クエリを &amp;lt;page-query&amp;gt; 内に書くなど、 Vue らしさというか XML 側に寄せているような 雰囲気があるのが大きな違いでしょうか。
HTML や vanilla な javascript はもはやバイナリのような扱いを受けることもあるので、 React/Gatsby など、 typescript などにロジックを寄せて、html なども生成するような形にするのが筋が通っているように感じられます。
……というのは多分 &amp;lt;page-query&amp;gt; 内のインデントがボロボロになってしまったのが気になったのもあると思います。 Intellij 用の gridsome プラグインを書きましょう……となりました。</description></item><item><title>ページネーションの方向を変えました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/change-pagination-direction/</link><pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/change-pagination-direction/</guid><description>個別のポストのページと、一覧ページのページネーションの向きが逆だったので、 個別のポストのページの方向に揃えました。
それと、 next や previous では方向が分かりにくいと感じることが多いため、 newer と older に変更しました。</description></item><item><title>Cockpitプロジェクトについて調べました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/cockpit-project/</link><pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/cockpit-project/</guid><description>Cockpit は、Linux マシンの管理用の Web アプリです。
debian/RHEL 系では標準のレポジトリに入っていて、インストールすればあとは接続するだけで使えるようになります。
ある程度のことは GUI で設定可能ですし、 shell も用意されているので、ほとんどの操作が可能です。 shell はショートカット等にも対応していて、操作性もいい方だと思いました。
API のドキュメントなどもあるようなので、機能のカスタマイズもできそうです。 ブラウザからサーバーを管理する必要があれば使ってみようと思いました。</description></item><item><title>ヒューリスティック質問</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/heuristic-question/</link><pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/heuristic-question/</guid><description>なぜ「事実」と「意見」を区別して話せない人がいるのか。 - Books&amp;amp;Apps を読んで、ターゲット質問とヒューリスティック質問というものを知りました。
Daniel Kahneman, Thinking, Fast and Slow に書いてあるようで、原文の引用は以下にあります。 Target question vs. Heuristic question - Bologna
確かに脳がこういう動きをしている気はします。脳の動きについては自分自身のことでも完全には理解できていないので、 当てはまりそうなものを見つけて分析していきたいと思っています。</description></item><item><title>W3Techsを見つけました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/found-w3techs/</link><pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/found-w3techs/</guid><description>PHPはもうダメだ、PHP万歳！ - POSTD を読んでいるときに、 W3Techs の調査を見つけました。 最近 POSTD をあまり見ていなかったのですが、 2019/04 から更新がないようですね……。
W3Techs の調査を見てみると、PHP や jQuery の使用率が 70% を超えていて、 身の周りで感じる感覚とは全く違う値が示されています。 もしかしたら、 uglify や minify の影響を受けているのかもしれません。 ただ、既存プロジェクトで PHP などを使っている場面は普通に見かけるので、 身の周りで新規に作っているもの以外で考えると一般的なのかもしれません。
最近は ecmascript, typescript, webpack, babel, core-js などがあるので、 jquery を少しずつ新しい技術に移行していくことも可能だと思っています。 時間を作って試してみたいと思います。
You might not need jQuery も移行に役立ちそうです。</description></item><item><title>JSXを単体で使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-jsx/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-jsx/</guid><description>JSX といえば React というイメージですが、別に一緒に使わないといけないわけではないと思うので、 webpack, babel あたりを使って試してみました。
React.createElement 相当のライブラリは一旦 jsx-render を使ってみました。 Lessons learned using JSX without React を参考にしましたが、レポジトリが消えているようなので代替を探す必要があるかもしれません。
また、 eslint や prettier もよく使うのでインストールしました。 eslint で JSX はサポートされているようですが、 unused-var になるなど問題点もあるようです。
Aurelia などもありますが、できるだけフロントエンドフレームワークを使わないで Web 標準を使って Web アプリを作る方法を模索してみるのもよいかもしれません。(JSX, Web components など。)</description></item><item><title>Reactを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-react/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-react/</guid><description>9 Projects you can do to become a Frontend Master in 2020 を進めています。
Tutorial は How to build a movie search app using React Hooks です。
今回も create-react-app を使わずに from scratch で作成します。
yarn add -D @babel/core @babel/cli @babel/preset-env @babel/presetpack-dev-server style-loader css-loader babel-loader yarn add react react-dom yarn add -D @types/react @types/react-dom ts-loader typescript yarn add react-hot-loader styled-components なんかも使っていきたいと思っています。</description></item><item><title>Svelteをwebpackで使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/svelte-webpack/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/svelte-webpack/</guid><description>Building A Svelte 3 Todo App From Start To Deployment に従いつつ、 rollup の代わりに webpack を使って from stratch で作成してみました。
手順 まずは Svelte アプリの作成をします。 webpack を使った template は sveltejs/template-webpack にありますが、これを参考に以下のコマンドを実行します。
mkdir svelte-todo-webpack cd svelte-todo-webpack yarn init git init yarn add -D webpack{,-cli,-dev-server} svelte{,-loader} {css,style}-loader mini-css-extract-plugin 今回は cross-env, serve, sirv-cli などを使わないようにするため、いくつか変更している箇所があります。 とは言っても、 serve はどこで使っているか分からなかったので、単に webpack の設定を function にして、 --env.NODE_ENV=development という風に渡すように変更しただけですが。……多分。
あとはシュッと ToDo アプリの実装をします。簡単でしたね。
HMR でのエラー TypeError: &amp;quot;todoitem.$on is not a function&amp;quot; というようなエラーがブラウザのコンソールに出ていました。 どうやら HMR に対応していないようなので、 HMR を無効にすることで対応しました。</description></item><item><title>esModuleInteropを使わないようにしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/get-rid-of-es-module-interop/</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/get-rid-of-es-module-interop/</guid><description>このブログに Typescript を導入したとき、 default import でエラーが出ていたので一旦 tsconfig.json に esModuleInterop を追加して対処していました。
ただ、デフォルトの設定を変更するのはあまり好ましくないと感じたので、 microsoft/TypeScript#3337 を参考に、 import React from 'react を import * as React from 'react に 書き換えることで対処しました。
これが esModuleInterop に対する正しい対処方法かは分かりませんが……。</description></item><item><title>Gatsbyのブログにページネーションを追加しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/add-pagination-to-gatsby-blog/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/add-pagination-to-gatsby-blog/</guid><description>この Gatsby を使っているブログも10ポストを超えてきました。 そこで、普通のブログのようにページネーションを導入しました。
NickyMeuleman/gatsby-paginated-blog を参考に、といっても gatsby-node.js と src/pages/index.js を編集するだけですが……。 commit e871f7e で変更した通りです。
実装を見てみると簡易的なもののようなので、10ページ程度になる前にもうちょっとちゃんとした 実装に変更しないといけないかなと思っています。</description></item><item><title>unpkgとtagged template literal</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-unpkg-and-template-literal/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-unpkg-and-template-literal/</guid><description>UNPKG と tagged template literal を知りました。
IE 非対応……babel 使いましょうという感じですね。</description></item><item><title>GatsbyでTypescriptを使い始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/migrate-gatsby-blog-to-typescript/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/migrate-gatsby-blog-to-typescript/</guid><description>gatsbyを使い始めました で typescript について言及していたので、 typescript を導入してみました。
gatsby-plugin-typescript をインストールして、 props とかの型を適当につけて、tsx に変えればほぼ終了です。
Gatsby の設定ファイルも typescript にしようと思って clarkdave さんの Gist を参考にやってみたのですが、 slug の生成周りがうまくいかなかったので、一旦そのままにしています。 Gatsby の actions なんかを調べながら再挑戦しようと思っています。</description></item><item><title>CORSのテストができるサイトを見つけました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/found-test-cors/</link><pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/found-test-cors/</guid><description>CORSのテストができるサイトを見つけました。
monsur/test-cors.org
CORSのテストができます。
いやまあ、適当に Axios なんかでリクエスト飛ばせばいい話なんですが……</description></item><item><title>Gatsbyのスタイルを変更しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/append-default-style/</link><pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/append-default-style/</guid><description>このブログを作成するときに gatsby-starter-blog を使ったのですが、スタイルを変えていなかったので、 gatsby-starter-default から style.css をコピーしてみました。
そろそろ Gatsby についてもう少し学んでもいいかなと思いました。</description></item><item><title>なぜIDEの支援機能を使うのか</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/why-programmers-use-ide/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/why-programmers-use-ide/</guid><description>少し前まで IDE の補完機能など、コーディングの支援機能を使いながらコーディングすることが、 なんだか IDE にコーディングさせられているようで嫌でした。
これは恐らく私だけが感じていることではなくて、初心者の方のツイートで IDE なしでコーディングする/コーディングできるようになりたい、といった 発言を見かけることがあります。
ただ、これは開発の規模がまだ小さいときに強く感じるものだと思います。 コードベースの規模が大きくなってくると、細かい所まで全て覚えていられないですし、 コーディング量が増えるにつれてミスをする確立も上がっていきます。 そんなときに IDE を使っていると、例え補完機能を(候補が出ても無視して) ほとんど使っていなかったとしても、ミスがあればすぐに知らせてくれますし、 仮にスペルに自信がないなどの場合にも補完機能を使ってスムーズにコーディングを進めることができます。 (もし補完機能を使っていなければ定義されている箇所を確認することになりますし、 早くミスを見つけるためには頻繁にコンパイル等をする必要があります。)
コンピュータはコアとなるロジックを実装されるまで知りません。 プログラマーはそのコアロジックの実装に集中することで生産性を高めようとしています。 そのため、既に実装されている部分やライブラリについてはコンピュータの助けを借りて、 新しい部分の実装に集中することができるのです。
もちろん、主体的にプログラミングする必要があります。 いくら候補が表示されているからといって、何も考えずにそれを選んでいると間違うこともあります。 自分で何を実装すべきかをきちんと認識した上で、実際のコード上の表現について 助けを借りる、といった考え方が合っているのかなと思っています。</description></item><item><title>AndroidアプリでHelloWorldをしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/helloworld-android-with-intellij/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/helloworld-android-with-intellij/</guid><description>今まで Android アプリ開発には Android Studio を使っていて、 IntelliJ IDEA と両方使っていたのですが、 Android アプリも Intellij IDEA で開発してみました。
背景 今までも何度か IntelliJ で Android アプリの開発を試みていたのですが、 謎のエラーに悩まされていて、特に Visual Layout Editor が機能しなくて困っていました。
Sync Project with Gradle Files を選ぶと以下のエラーが出ていました。
New Gradle Sync is not supported due to containing Kotlin modules 原因 上記のエラーメッセージで検索すると、皆さんいろいろな方法で解決されているようですが、 私はどの方法でも解決しませんでした。
結論としては、システムの JRE のバージョンが 13 だったことが原因だったようです。
Java - Arch Wiki を参考に、 IntelliJ を Java8(1.8) を使って起動するようにしたら解決しました。
感想 IntelliJ の設定は複雑すぎる気がします…… とはいえ、新しい IDE を使う度に同じことを思っている気もします。
シンプルにすればいいというわけではないですが、エラーメッセージはもう少し詳細に書いてほしいのと、 プロジェクト作成などある程度のことは CLI でもできるようにするなど、 問題の切り分けがやりやすくなればいいなと思いました。</description></item><item><title>GnuPGのssh-agentエミュレータを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gpg-ssh-agent/</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gpg-ssh-agent/</guid><description>今まではあまり気にしていなかったのですが、gh-pages のデプロイ時に2回パスフレーズを聞かれるのが さすがに気になってしまい、 ssh-agent を使うことにしました。
前に何度か使っていたような記憶があるのですが、システム自体をあまり理解していなかったのもあり、 今の環境をセットアップするときには有効にしていませんでした。
設定 基本的にはGnuPG - ArchWiki に従うだけです。
~/.pam_environment で SSH_AUTH_SOCK の設定をして、Xorg で使う場合は TTY の設定をします。
感想 ssh-agent と変わらずパスフレーズのキャッシュなどは普通に便利なのですが、 gpg-agent は内部で ssh-key を gpg-key としてインポートしていそうな感じですね。(追って調査します)
gpg-key で ssh することも可能なので、行く行くは gpg-key にまとめてしまおうかなと思っています。</description></item><item><title>dockerのインストールでハマりました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/problem-on-installing-docker/</link><pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/problem-on-installing-docker/</guid><description>Docker のインストールは何度もやったことがあるのですが、稼働中のサーバー上でインストールした経験はなかったので、 (特殊な状況というか、あまり好ましくない状況ですが)ネットワーク周りで少しハマりました。
背景 稼働中のサービスがあるホストで、再起動は避けたい状況でした。
そのサービスのアップデートをデプロイする前に、docker コンテナ化したアップデート済みサービスを デプロイして検証しようとしていました。
いやまあ検証環境分けろはそうなんですが……。
発生した問題 centos7 に docker をインストールし、docker-compose でコンテナを起動した所、 他のコンテナとはネットワークアクセス可能なのに、外部へのアクセスができない状況でした。
(直接？の原因としては、 iptables の FORWARD チェーンが DROP になっていました。)
iptables に docker 用のルールが自動で追加されるようなのですが(手元のマシンには追加されていました)、そのホストには 追加されていませんでした。
解決方法 systemctl restart docker を実行しました。終わり。
まとめ？ 普通にホスト再起動してあげましょう。 というかメンテナンスしよ？</description></item><item><title>すごいHaskell楽しく学ぼうを読み始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/reading-learn-you-a-haskell-for-great-good/</link><pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/reading-learn-you-a-haskell-for-great-good/</guid><description>関数型言語は Elm などいくつか触ったことがありますが、 Haskell はきちんと触っていなかったので すごいH本を読んでみました。
英語版も公開されていますね。
型クラス 型クラスという名前は知っていましたが、具体的にどのようなものかは分かっていませんでした。
サブクラスなども一貫性のある記述方法で、分かりやすいと感じました。
感想 8章あたりまで斜め読みをしただけなのですが、もう Haskell は楽しいと感じています。
あとはモナドトランスフォーマーなどの理解を……(？)</description></item><item><title>Svelteを使ってみました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-svelte/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-svelte/</guid><description>9 Projects you can do to become a Frontend Master in 2020 をこなしていきます。今回は Svelte で ToDo アプリを作るやつを少しだけ進めてみました。
導入 The easiest way to get started with Svelte に書いてある通りですが、 degit を yarn で使うには少し注意が必要です。
npx degit の場合、2番目の引数はカレントディレクトリのフォルダ名になりますが、 (~/node_modules/.bin/degit を使う場合の) yarn degit の場合は、ホームディレクトリからのフォルダ名になるような気がします。
そのため、代わりに以下のコマンドを実行するのでもよさそうです。
git clone https://github.com/sveltejs/template my-svelte-project cd my-svelte-project rm -r .git yarn yarn dev 感想 今回はデフォルトの rollup をそのまま使ってみましたが、 webpack も使えるようです。 また webpack でも試してみようかなと思います。</description></item><item><title>ArchLinuxが壊れたときにまず試すことメモ</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/how-to-fix-broken-arch-linux/</link><pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/how-to-fix-broken-arch-linux/</guid><description>私は体に染みついていますが、他の人はそうではないと思うのでメモしておきます。
手順 USB key から起動して、いつも通りマウントして chroot して pacman -S linux する
自動化 まれによくあるので、installation 環境とデュアルブートにしておいて、fstabから自動マウントして、 いつも通りカーネルを再インストールするようにすると楽かもしれません。
最近はほとんど壊れないのでモチベーションは低いですが……今後の課題とします。</description></item><item><title>gatsbyを使い始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gatsby/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-gatsby/</guid><description>Jekyll を使い始めたところですが、早速浮気して Gatsby を使っていこうと思います。
9 Projects you can do to become a Frontend Master in 2020 に丁度 gatsby で blog を作るという項目があったので、これを順不同でこなしていこうと思います。
導入 gatsby new を実行します。
gh-pages 公式ドキュメントの How Gatsby Works with GitHub Pages を参考に、 yarn add -D gh-pages を実行して、 deploy スクリプトを追加します。
また、 gatsby-config.js に pathPrefix を追加して、実際のレポジトリに合わせて設定します。
GitHub Pagesにデプロイ yarn deploy を実行します。
標準では自動で gh-pages ブランチに push されるようです。
感想 内部で GraphQL を使っていてなるほど〜となりました。 今までこういった Static Site Generator を使ったことはなかったのですが、理想に近いものだと感じました。
でも github-pages 公式サポートのある Jekyll の方が楽なんですよね……少し悩んでいます。</description></item><item><title>octokit 4.15.0がリリースされました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/released-octokit/</link><pubDate>Sat, 04 Jan 2020 01:18:27 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/released-octokit/</guid><description>octokitをアップデートしました では octokit のリリースがまだだったので github から 直接インストールするようにしてアップデートしましたが、 4.15.0 がリリースされたのでそちらにアップデートします。
github 指定を削除 gem &amp;quot;octokit&amp;quot;, github: &amp;quot;octokit/octokit.rb&amp;quot;, ref: &amp;quot;ae5838a&amp;quot; を削除して、 bundle update を実行します。
これで faraday 1.0 系でもエラーにならずに正しく実行できるようになりました。
リリースありがとうございます！</description></item><item><title>Jekyllのタイムゾーン設定を変更しました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/change-jekyll-timezone/</link><pubDate>Sat, 04 Jan 2020 01:00:00 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/change-jekyll-timezone/</guid><description>octokitをアップデートしました を投稿したのが01時 だったのですが、前日の投稿として表示されてしまいました。
原因・JST設定 GitHub の CI でのデフォルトのタイムゾーンが JST ではないからですね。
Jekyll の Configuration Options を確認すると、 Timezone を設定できるようです。 Asia/Tokyo に設定しました。
UTC に揃える 全部 UTC に揃えたら楽だとは思いますが、朝09時に日付が変わるのはまだ慣れないので…… と思ったのですが、 gatsby の方で面倒だったのでやっぱり UTC に揃えることにしました。</description></item><item><title>octokitをアップデートしました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/update-octokit/</link><pubDate>Fri, 03 Jan 2020 01:06:28 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/update-octokit/</guid><description>Jekyllを使い始めました でセットアップ時に エラーが出ていたので調査しました。
原因 faraday gem の 1.0 がリリースされたことが原因ですが、リリースされたのが丁度01/01でした。 情報が少なかったわけです。
依存ツリーとしては
github-pages github-pages-health-check, jekyll-gist, jekyll-github-metadata octokit (sawyer) faraday となっているようです。 また、 ~&amp;gt; 0 のような、1系が入らないバージョン指定もないようです。
各gemのissueの確認 issue github/pages-gem#665 PR octokit/octokit.rb#1154 どうやら原因は octokit にあるようです。 修正の PR 自体は master ブランチにマージされていて、リリースを待つだけのようです。
issue octokit/octokit.rb#1177 によると、来週にはリリースする予定ということです。
workaround 01/01 に書いたように faraday の 0.17 を指定することでもエラーは出なくなりますが、 octokit を github から取得するようにしても対応できます。
具体的には、
gem &amp;quot;octokit&amp;quot;, github: &amp;quot;octokit/octokit.rb&amp;quot;, ref: &amp;quot;ae5838a&amp;quot; を Gemfile に追加することで、 faraday の 1系を使えるようになります。
(ae5838a 以降であればいいので、 branch: &amp;quot;master&amp;quot; などでも問題ないです。)</description></item><item><title>Progateを始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-progate/</link><pubDate>Thu, 02 Jan 2020 14:50:52 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-progate/</guid><description>最近 Twitter で Progate という名前をよく見かけるので、 Go のレッスンを始めてみました。
レッスン1 やるだけ
レッスン2 1枚目のスライドの内容とは関係ない部分ですが、Go のレッスン1、 レッスン2 を それぞれ GoⅠ と GoⅡ と表わしているのが見た目に紛らわしいなと思いました。
はい、やるだk……有料プランの説明が出てきました。
そういえば始めの方のレッスンのみ無料ということだったので、とりあえず無料のレッスンを進めていきます。
レッスン3, レッスン4 やるだけ
感想 Go、…… Better C？
関数型が好きです、よろしくお願いします。</description></item><item><title>Jekyllを使い始めました</title><link>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-jekyll/</link><pubDate>Wed, 01 Jan 2020 11:23:40 +0000</pubDate><guid>https://ny-a.github.io/hugo-blog/posts/2020-01/introduction-of-jekyll/</guid><description>一年の計は元旦にあり！
……
…………
………………
( ˘ω˘ )
元日なのでセーフということで……
Jekyll をセットアップしてブログを書き始めました。 今年は毎日何かアウトプットすることが目標です。
Jekyll のセットアップ セットアップの方法は、基本的に公式の docsに書いてある通りです。
jekyll new blog cd blog sed -i -e 's/^gem &amp;quot;jekyll&amp;quot;/# &amp;amp;/' -e '/gem &amp;quot;github-pages&amp;quot;/s/^#//' -e '$a gem &amp;quot;faraday&amp;quot;, &amp;quot;~&amp;gt; 0.17&amp;quot;' Gemfile bundle update sed -i -e 's#baseurl: &amp;quot;&amp;quot;#baseurl: &amp;quot;/blog&amp;quot;#' _config.yml bundle exec jekyll serve 1つ問題があり、数ヶ月前に同様の手順を踏んだときから faraday が 1.0 にアップデートされたようで、実行時に jekyll 3.8.5 | Error: uninitialized constant Faraday::Error::ClientError というエラーが出るようになっていました。
そのため、 workaround として faraday を 0.17 系を使用するようにしました。
Happy new year!</description></item></channel></rss>